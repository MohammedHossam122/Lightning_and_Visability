
LightningAndVisibilityFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000367e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000367e  00003712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800168  00800168  0000381a  2**0
                  ALLOC
  3 .stab         00003438  00000000  00000000  0000381c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b1d  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008771  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000088b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a66a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b555  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c464  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cebf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_4>
      14:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_7>
      20:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_8>
      24:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_9>
      28:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_10>
      2c:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 12 	call	0x24fa	; 0x24fa <main>
      8a:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e5       	ldi	r26, 0x58	; 88
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e5       	ldi	r24, 0x58	; 88
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		 /* Write the pin value as required */
		switch (port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch (port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch (port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <PWM_Timer2_Start>:
 * FAST PWM mode (WGM01 = 1, WGM00 = 1)
 * Non-Inverting  Clear OC0 On Compare ( COM01 = 1 )
 * Pre-scalar = 8 ( CS01 = 1 )
 */
void PWM_Timer2_Start(uint8 duty_cycle)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <PWM_Timer2_Start+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	67 e0       	ldi	r22, 0x07	; 7
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	uint8 ON_time = (uint8)((uint16)(PWM_MAX_VALUE * duty_cycle ) / 100);
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	48 2f       	mov	r20, r24
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	ca 01       	movw	r24, r20
    11e0:	9c 01       	movw	r18, r24
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	c9 01       	movw	r24, r18
    11e8:	96 95       	lsr	r25
    11ea:	98 2f       	mov	r25, r24
    11ec:	88 27       	eor	r24, r24
    11ee:	97 95       	ror	r25
    11f0:	87 95       	ror	r24
    11f2:	82 1b       	sub	r24, r18
    11f4:	93 0b       	sbc	r25, r19
    11f6:	84 0f       	add	r24, r20
    11f8:	95 1f       	adc	r25, r21
    11fa:	24 e6       	ldi	r18, 0x64	; 100
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	b9 01       	movw	r22, r18
    1200:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__udivmodhi4>
    1204:	cb 01       	movw	r24, r22
    1206:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;
    1208:	e4 e4       	ldi	r30, 0x44	; 68
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
	OCR2 = ON_time;
    120e:	e3 e4       	ldi	r30, 0x43	; 67
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	80 83       	st	Z, r24
	TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS21);		/* Non- Inverting Fast PWM ( Prescalar = 8 ) */
    1216:	e5 e4       	ldi	r30, 0x45	; 69
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8a e6       	ldi	r24, 0x6A	; 106
    121c:	80 83       	st	Z, r24
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <__vector_11>:
 *                                	Interrupt Service Routine                                      *
 ***************************************************************************************************/

/*	Timer0 callback function for overflow mode*/
ISR(TIMER0_OVF_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_callBackPtr != NULL_PTR)
    1252:	80 91 68 01 	lds	r24, 0x0168
    1256:	90 91 69 01 	lds	r25, 0x0169
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	29 f0       	breq	.+10     	; 0x1268 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* call the function using pointer to function g_Timer0_callBackPtr(); */
    125e:	e0 91 68 01 	lds	r30, 0x0168
    1262:	f0 91 69 01 	lds	r31, 0x0169
    1266:	09 95       	icall
	}
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_10>:

/*	Timer0 callback function for compare mode*/
ISR(TIMER0_COMP_vect)
{
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_callBackPtr != NULL_PTR)
    12b8:	80 91 68 01 	lds	r24, 0x0168
    12bc:	90 91 69 01 	lds	r25, 0x0169
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	29 f0       	breq	.+10     	; 0x12ce <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* call the function using pointer to function g_Timer0_callBackPtr(); */
    12c4:	e0 91 68 01 	lds	r30, 0x0168
    12c8:	f0 91 69 01 	lds	r31, 0x0169
    12cc:	09 95       	icall
	}
}
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <__vector_9>:

/*	Timer1 callback function for overflow mode*/
ISR(TIMER1_OVF_vect)
{
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callBackPtr != NULL_PTR)
    131e:	80 91 6a 01 	lds	r24, 0x016A
    1322:	90 91 6b 01 	lds	r25, 0x016B
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	29 f0       	breq	.+10     	; 0x1334 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    132a:	e0 91 6a 01 	lds	r30, 0x016A
    132e:	f0 91 6b 01 	lds	r31, 0x016B
    1332:	09 95       	icall
	}
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <__vector_7>:

/*	Timer1 callback function for compare (A) mode*/
ISR(TIMER1_COMPA_vect)
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
//	if(OCR1A==1953){
//		TCNT1=0;
//	}
	if (g_Timer1_callBackPtr != NULL_PTR)
    1384:	80 91 6a 01 	lds	r24, 0x016A
    1388:	90 91 6b 01 	lds	r25, 0x016B
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	29 f0       	breq	.+10     	; 0x139a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    1390:	e0 91 6a 01 	lds	r30, 0x016A
    1394:	f0 91 6b 01 	lds	r31, 0x016B
    1398:	09 95       	icall
	}
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <__vector_8>:

/*	Timer1 callback function for compare (B) mode*/
ISR(TIMER1_COMPB_vect)
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callBackPtr != NULL_PTR)
    13ea:	80 91 6a 01 	lds	r24, 0x016A
    13ee:	90 91 6b 01 	lds	r25, 0x016B
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	29 f0       	breq	.+10     	; 0x1400 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    13f6:	e0 91 6a 01 	lds	r30, 0x016A
    13fa:	f0 91 6b 01 	lds	r31, 0x016B
    13fe:	09 95       	icall
	}
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <__vector_5>:

/*	Timer2 callback function for overflow mode*/
ISR(TIMER2_OVF_vect)
{
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_callBackPtr != NULL_PTR)
    1450:	80 91 6c 01 	lds	r24, 0x016C
    1454:	90 91 6d 01 	lds	r25, 0x016D
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	29 f0       	breq	.+10     	; 0x1466 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* call the function using pointer to function g_Timer2_callBackPtr(); */
    145c:	e0 91 6c 01 	lds	r30, 0x016C
    1460:	f0 91 6d 01 	lds	r31, 0x016D
    1464:	09 95       	icall
	}
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <__vector_4>:

/*	Timer2 callback function for compare mode*/
ISR(TIMER2_COMP_vect)
{
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_callBackPtr != NULL_PTR)
    14b6:	80 91 6c 01 	lds	r24, 0x016C
    14ba:	90 91 6d 01 	lds	r25, 0x016D
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	29 f0       	breq	.+10     	; 0x14cc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* call the function using pointer to function g_Timer2_callBackPtr(); */
    14c2:	e0 91 6c 01 	lds	r30, 0x016C
    14c6:	f0 91 6d 01 	lds	r31, 0x016D
    14ca:	09 95       	icall
	}
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <Timer_init>:
 * 4- Compare Value: 		0 -> 255 (Timer0/Timer2) and 0 -> 65535 (Timer1)
 * 5- Timerx Source:		Choose from (No Clock/ Pre-scalar / External Clock)
 * 6- Timer Compare Match:	Choose from (No OCx, Toggle OCx, Clear OCx, Set OCx)	[Only for compare mode]
 */
void Timer_init(const Timer_ConfigType* Config_Ptr)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <Timer_init+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <Timer_init+0x8>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Timerx_ID)
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	84 81       	ldd	r24, Z+4	; 0x04
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <Timer_init+0x2a>
    151a:	60 c0       	rjmp	.+192    	; 0x15dc <Timer_init+0xea>
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <Timer_init+0x36>
    1526:	b9 c0       	rjmp	.+370    	; 0x169a <Timer_init+0x1a8>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <Timer_init+0x40>
    1530:	07 c1       	rjmp	.+526    	; 0x1740 <Timer_init+0x24e>
	/**************************************************************************)*
	 *                                	Timer0                   	   			*
	 ****************************************************************************/
	case (TIMER0_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR0 = (1<<FOC0);
    1532:	e3 e5       	ldi	r30, 0x53	; 83
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 e8       	ldi	r24, 0x80	; 128
    1538:	80 83       	st	Z, r24

	/* Set the start value */
	TCNT0 = Config_Ptr->Start_value;
    153a:	a2 e5       	ldi	r26, 0x52	; 82
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e9 81       	ldd	r30, Y+1	; 0x01
    1540:	fa 81       	ldd	r31, Y+2	; 0x02
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	8c 93       	st	X, r24

	/* Set the pre-scalar or timer source */
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->Timer_Source << CS00);
    1548:	a3 e5       	ldi	r26, 0x53	; 83
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e3 e5       	ldi	r30, 0x53	; 83
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	98 2f       	mov	r25, r24
    1554:	98 7f       	andi	r25, 0xF8	; 248
    1556:	e9 81       	ldd	r30, Y+1	; 0x01
    1558:	fa 81       	ldd	r31, Y+2	; 0x02
    155a:	86 81       	ldd	r24, Z+6	; 0x06
    155c:	89 2b       	or	r24, r25
    155e:	8c 93       	st	X, r24

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	85 81       	ldd	r24, Z+5	; 0x05
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	59 f5       	brne	.+86     	; 0x15c0 <Timer_init+0xce>
	{
		TCCR0 = (TCCR0 & 0xB7) | (1<<WGM01);			/* Clears WGM00 and Set WGM01*/
    156a:	a3 e5       	ldi	r26, 0x53	; 83
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e3 e5       	ldi	r30, 0x53	; 83
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	87 7b       	andi	r24, 0xB7	; 183
    1576:	88 60       	ori	r24, 0x08	; 8
    1578:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM00);
    157a:	a3 e5       	ldi	r26, 0x53	; 83
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e3 e5       	ldi	r30, 0x53	; 83
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	28 2f       	mov	r18, r24
    1586:	2f 7c       	andi	r18, 0xCF	; 207
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	87 81       	ldd	r24, Z+7	; 0x07
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	82 95       	swap	r24
    1594:	92 95       	swap	r25
    1596:	90 7f       	andi	r25, 0xF0	; 240
    1598:	98 27       	eor	r25, r24
    159a:	80 7f       	andi	r24, 0xF0	; 240
    159c:	98 27       	eor	r25, r24
    159e:	82 2b       	or	r24, r18
    15a0:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->Compare_value;
    15a2:	ac e5       	ldi	r26, 0x5C	; 92
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);								/* Enable Timer0 compare interrupt */
    15b0:	a9 e5       	ldi	r26, 0x59	; 89
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 e5       	ldi	r30, 0x59	; 89
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	82 60       	ori	r24, 0x02	; 2
    15bc:	8c 93       	st	X, r24
    15be:	c0 c0       	rjmp	.+384    	; 0x1740 <Timer_init+0x24e>
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    15c0:	e9 81       	ldd	r30, Y+1	; 0x01
    15c2:	fa 81       	ldd	r31, Y+2	; 0x02
    15c4:	85 81       	ldd	r24, Z+5	; 0x05
    15c6:	88 23       	and	r24, r24
    15c8:	09 f0       	breq	.+2      	; 0x15cc <Timer_init+0xda>
    15ca:	ba c0       	rjmp	.+372    	; 0x1740 <Timer_init+0x24e>
	{
		TIMSK |= (1<<TOIE0);								/* Enable Timer0 overflow interrupt */
    15cc:	a9 e5       	ldi	r26, 0x59	; 89
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e9 e5       	ldi	r30, 0x59	; 89
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	8c 93       	st	X, r24
    15da:	b2 c0       	rjmp	.+356    	; 0x1740 <Timer_init+0x24e>
	/**************************************************************************)*
	 *                                	Timer1                   	   			*
	 ****************************************************************************/
	case (TIMER1_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    15dc:	af e4       	ldi	r26, 0x4F	; 79
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ef e4       	ldi	r30, 0x4F	; 79
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8c 60       	ori	r24, 0x0C	; 12
    15e8:	8c 93       	st	X, r24

	/* Set the start value */
	TCNT1 = Config_Ptr->Start_value;
    15ea:	ac e4       	ldi	r26, 0x4C	; 76
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e9 81       	ldd	r30, Y+1	; 0x01
    15f0:	fa 81       	ldd	r31, Y+2	; 0x02
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	9c 93       	st	X, r25
    15fa:	8e 93       	st	-X, r24

	/* Set the pre-scalar or timer source */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Timer_Source << CS10);
    15fc:	ae e4       	ldi	r26, 0x4E	; 78
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ee e4       	ldi	r30, 0x4E	; 78
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	98 2f       	mov	r25, r24
    1608:	98 7f       	andi	r25, 0xF8	; 248
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	86 81       	ldd	r24, Z+6	; 0x06
    1610:	89 2b       	or	r24, r25
    1612:	8c 93       	st	X, r24

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	85 81       	ldd	r24, Z+5	; 0x05
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	81 f5       	brne	.+96     	; 0x167e <Timer_init+0x18c>
	{
		TCCR1B = (TCCR1B & 0xE7) | (1<<WGM12);				/* Clears WGM13 and Set WGM12 (Mode 4 CTC)*/
    161e:	ae e4       	ldi	r26, 0x4E	; 78
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ee e4       	ldi	r30, 0x4E	; 78
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	87 7e       	andi	r24, 0xE7	; 231
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	8c 93       	st	X, r24
		TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->Timer_Compare_Match << COM1A0);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	2f 73       	andi	r18, 0x3F	; 63
    163c:	e9 81       	ldd	r30, Y+1	; 0x01
    163e:	fa 81       	ldd	r31, Y+2	; 0x02
    1640:	87 81       	ldd	r24, Z+7	; 0x07
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	00 24       	eor	r0, r0
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	07 94       	ror	r0
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	07 94       	ror	r0
    1654:	98 2f       	mov	r25, r24
    1656:	80 2d       	mov	r24, r0
    1658:	82 2b       	or	r24, r18
    165a:	8c 93       	st	X, r24
		OCR1A  = Config_Ptr->Compare_value;
    165c:	aa e4       	ldi	r26, 0x4A	; 74
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e9 81       	ldd	r30, Y+1	; 0x01
    1662:	fa 81       	ldd	r31, Y+2	; 0x02
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	11 96       	adiw	r26, 0x01	; 1
    166a:	9c 93       	st	X, r25
    166c:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);								/* Enable Timer1 compare interrupt */
    166e:	a9 e5       	ldi	r26, 0x59	; 89
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e9 e5       	ldi	r30, 0x59	; 89
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 61       	ori	r24, 0x10	; 16
    167a:	8c 93       	st	X, r24
    167c:	61 c0       	rjmp	.+194    	; 0x1740 <Timer_init+0x24e>
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    167e:	e9 81       	ldd	r30, Y+1	; 0x01
    1680:	fa 81       	ldd	r31, Y+2	; 0x02
    1682:	85 81       	ldd	r24, Z+5	; 0x05
    1684:	88 23       	and	r24, r24
    1686:	09 f0       	breq	.+2      	; 0x168a <Timer_init+0x198>
    1688:	5b c0       	rjmp	.+182    	; 0x1740 <Timer_init+0x24e>
	{
		TIMSK |= (1<<TOIE1);								/* Enable Timer1 overflow interrupt */
    168a:	a9 e5       	ldi	r26, 0x59	; 89
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e9 e5       	ldi	r30, 0x59	; 89
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	84 60       	ori	r24, 0x04	; 4
    1696:	8c 93       	st	X, r24
    1698:	53 c0       	rjmp	.+166    	; 0x1740 <Timer_init+0x24e>
	/**************************************************************************)*
	 *                                	Timer2                   	   			*
	 ****************************************************************************/
	case (TIMER2_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR2 = (1<<FOC2);
    169a:	e5 e4       	ldi	r30, 0x45	; 69
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 e8       	ldi	r24, 0x80	; 128
    16a0:	80 83       	st	Z, r24

	/* Set the start value */
	TCNT2 = Config_Ptr->Start_value;
    16a2:	a4 e4       	ldi	r26, 0x44	; 68
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e9 81       	ldd	r30, Y+1	; 0x01
    16a8:	fa 81       	ldd	r31, Y+2	; 0x02
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	8c 93       	st	X, r24

	/* Set the pre-scalar or timer source */
	TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->Timer_Source << CS20);
    16b0:	a5 e4       	ldi	r26, 0x45	; 69
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e4       	ldi	r30, 0x45	; 69
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	98 2f       	mov	r25, r24
    16bc:	98 7f       	andi	r25, 0xF8	; 248
    16be:	e9 81       	ldd	r30, Y+1	; 0x01
    16c0:	fa 81       	ldd	r31, Y+2	; 0x02
    16c2:	86 81       	ldd	r24, Z+6	; 0x06
    16c4:	89 2b       	or	r24, r25
    16c6:	8c 93       	st	X, r24

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    16c8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ca:	fa 81       	ldd	r31, Y+2	; 0x02
    16cc:	85 81       	ldd	r24, Z+5	; 0x05
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	59 f5       	brne	.+86     	; 0x1728 <Timer_init+0x236>
	{
		TCCR2 = (TCCR2 & 0xB7) | (1<<WGM21);			/* Clears WGM20 and Set WGM21*/
    16d2:	a5 e4       	ldi	r26, 0x45	; 69
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e4       	ldi	r30, 0x45	; 69
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	87 7b       	andi	r24, 0xB7	; 183
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM20);
    16e2:	a5 e4       	ldi	r26, 0x45	; 69
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e4       	ldi	r30, 0x45	; 69
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	2f 7c       	andi	r18, 0xCF	; 207
    16f0:	e9 81       	ldd	r30, Y+1	; 0x01
    16f2:	fa 81       	ldd	r31, Y+2	; 0x02
    16f4:	87 81       	ldd	r24, Z+7	; 0x07
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	82 95       	swap	r24
    16fc:	92 95       	swap	r25
    16fe:	90 7f       	andi	r25, 0xF0	; 240
    1700:	98 27       	eor	r25, r24
    1702:	80 7f       	andi	r24, 0xF0	; 240
    1704:	98 27       	eor	r25, r24
    1706:	82 2b       	or	r24, r18
    1708:	8c 93       	st	X, r24
		OCR2  = Config_Ptr->Compare_value;
    170a:	a3 e4       	ldi	r26, 0x43	; 67
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE2);								/* Enable Timer2 compare interrupt */
    1718:	a9 e5       	ldi	r26, 0x59	; 89
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e9 e5       	ldi	r30, 0x59	; 89
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	8c 93       	st	X, r24
    1726:	0c c0       	rjmp	.+24     	; 0x1740 <Timer_init+0x24e>
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    1728:	e9 81       	ldd	r30, Y+1	; 0x01
    172a:	fa 81       	ldd	r31, Y+2	; 0x02
    172c:	85 81       	ldd	r24, Z+5	; 0x05
    172e:	88 23       	and	r24, r24
    1730:	39 f4       	brne	.+14     	; 0x1740 <Timer_init+0x24e>
	{
		TIMSK |= (1<<TOIE2);								/* Enable Timer2 overflow interrupt */
    1732:	a9 e5       	ldi	r26, 0x59	; 89
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e9 e5       	ldi	r30, 0x59	; 89
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	8c 93       	st	X, r24
	}
	break;
	}
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(Timer_ID timer_ID, void(*a_ptr)(void))
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <Timer_setCallBack+0x6>
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	7b 83       	std	Y+3, r23	; 0x03
    175e:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_ID == TIMER0_ID)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	88 23       	and	r24, r24
    1764:	39 f4       	brne	.+14     	; 0x1774 <Timer_setCallBack+0x26>
	{
		/* Save the address of the Call back function in a global variable of Timer0 */
		g_Timer0_callBackPtr = a_ptr;
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	90 93 69 01 	sts	0x0169, r25
    176e:	80 93 68 01 	sts	0x0168, r24
    1772:	13 c0       	rjmp	.+38     	; 0x179a <Timer_setCallBack+0x4c>
	}
	else if(timer_ID == TIMER1_ID)
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	39 f4       	brne	.+14     	; 0x1788 <Timer_setCallBack+0x3a>
	{
		/* Save the address of the Call back function in a global variable of Timer1 */
		g_Timer1_callBackPtr = a_ptr;
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	90 93 6b 01 	sts	0x016B, r25
    1782:	80 93 6a 01 	sts	0x016A, r24
    1786:	09 c0       	rjmp	.+18     	; 0x179a <Timer_setCallBack+0x4c>
	}
	else if(timer_ID == TIMER2_ID)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	31 f4       	brne	.+12     	; 0x179a <Timer_setCallBack+0x4c>
	{
		/* Save the address of the Call back function in a global variable of Timer2 */
		g_Timer2_callBackPtr = a_ptr;
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	90 93 6d 01 	sts	0x016D, r25
    1796:	80 93 6c 01 	sts	0x016C, r24
	}
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <Timer_deinit>:
/*
 * Description :
 * De-Initialize the Timerx for the chosen timer (TIMER0_ID / TIMER1_ID / TIMER2_ID)
 */
void Timer_deinit(Timer_ID timer_ID)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
	if(timer_ID == TIMER0_ID)				/* De-initialize Timer0 */
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 23       	and	r24, r24
    17b6:	b1 f4       	brne	.+44     	; 0x17e4 <Timer_deinit+0x3e>
	{
		TCCR0 = 0;
    17b8:	e3 e5       	ldi	r30, 0x53	; 83
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	10 82       	st	Z, r1
		TCNT1 = 0;
    17be:	ec e4       	ldi	r30, 0x4C	; 76
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	11 82       	std	Z+1, r1	; 0x01
    17c4:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);
    17c6:	a9 e5       	ldi	r26, 0x59	; 89
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e9 e5       	ldi	r30, 0x59	; 89
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8e 7f       	andi	r24, 0xFE	; 254
    17d2:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    17d4:	a9 e5       	ldi	r26, 0x59	; 89
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e9 e5       	ldi	r30, 0x59	; 89
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8d 7f       	andi	r24, 0xFD	; 253
    17e0:	8c 93       	st	X, r24
    17e2:	3a c0       	rjmp	.+116    	; 0x1858 <Timer_deinit+0xb2>
	}

	else if(timer_ID == TIMER1_ID)			/* De-initialize Timer1 */
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	01 f5       	brne	.+64     	; 0x182a <Timer_deinit+0x84>
	{
		TCCR1A = 0;
    17ea:	ef e4       	ldi	r30, 0x4F	; 79
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	10 82       	st	Z, r1
		TCCR1B = 0;
    17f0:	ee e4       	ldi	r30, 0x4E	; 78
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	10 82       	st	Z, r1
		TCNT1 = 0;
    17f6:	ec e4       	ldi	r30, 0x4C	; 76
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1);
    17fe:	a9 e5       	ldi	r26, 0x59	; 89
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e9 e5       	ldi	r30, 0x59	; 89
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8b 7f       	andi	r24, 0xFB	; 251
    180a:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    180c:	a9 e5       	ldi	r26, 0x59	; 89
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e9 e5       	ldi	r30, 0x59	; 89
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8f 7e       	andi	r24, 0xEF	; 239
    1818:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1B);
    181a:	a9 e5       	ldi	r26, 0x59	; 89
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e9 e5       	ldi	r30, 0x59	; 89
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	87 7f       	andi	r24, 0xF7	; 247
    1826:	8c 93       	st	X, r24
    1828:	17 c0       	rjmp	.+46     	; 0x1858 <Timer_deinit+0xb2>
	}

	else if(timer_ID == TIMER2_ID)			/* De-initialize Timer2 */
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	a1 f4       	brne	.+40     	; 0x1858 <Timer_deinit+0xb2>
	{
		TCCR2 = 0;
    1830:	e5 e4       	ldi	r30, 0x45	; 69
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	10 82       	st	Z, r1
		TCNT2 = 0;
    1836:	e4 e4       	ldi	r30, 0x44	; 68
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2);
    183c:	a9 e5       	ldi	r26, 0x59	; 89
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e9 e5       	ldi	r30, 0x59	; 89
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 7b       	andi	r24, 0xBF	; 191
    1848:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    184a:	a9 e5       	ldi	r26, 0x59	; 89
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e9 e5       	ldi	r30, 0x59	; 89
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8f 77       	andi	r24, 0x7F	; 127
    1856:	8c 93       	st	X, r24
	}
}
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <Timer_SetStartValue>:

/*
 * Description: Function to set the Initial value of selected timer.
 */
void Timer_SetStartValue(Timer_ID timer_ID, uint16 start_value)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <Timer_SetStartValue+0x6>
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	7b 83       	std	Y+3, r23	; 0x03
    1870:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_ID == TIMER0_ID)			/* Set initial value for Timer0 */
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	88 23       	and	r24, r24
    1876:	29 f4       	brne	.+10     	; 0x1882 <Timer_SetStartValue+0x22>
	{
		TCNT0 = start_value;
    1878:	e2 e5       	ldi	r30, 0x52	; 82
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	80 83       	st	Z, r24
    1880:	11 c0       	rjmp	.+34     	; 0x18a4 <Timer_SetStartValue+0x44>
	}

	else if(timer_ID == TIMER1_ID)			/* Set initial value for Timer1 */
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	39 f4       	brne	.+14     	; 0x1896 <Timer_SetStartValue+0x36>
	{
		TCNT1 = start_value;
    1888:	ec e4       	ldi	r30, 0x4C	; 76
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	9b 81       	ldd	r25, Y+3	; 0x03
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <Timer_SetStartValue+0x44>
	}

	else if(timer_ID == TIMER2_ID)			/* Set initial value for Timer2 */
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	21 f4       	brne	.+8      	; 0x18a4 <Timer_SetStartValue+0x44>
	{
		TCNT2 = start_value;
    189c:	e4 e4       	ldi	r30, 0x44	; 68
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
	}
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <Timer_SetCompareValue>:

/*
 * Description: Function to set the Compare Value of the selected timer.
 */
void Timer_SetCompareValue(Timer_ID timer_ID, uint16 compare_value)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <Timer_SetCompareValue+0x6>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	7b 83       	std	Y+3, r23	; 0x03
    18c0:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_ID == TIMER0_ID)			/* Set compare value for Timer0 */
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	88 23       	and	r24, r24
    18c6:	29 f4       	brne	.+10     	; 0x18d2 <Timer_SetCompareValue+0x22>
	{
		OCR0 = compare_value;
    18c8:	ec e5       	ldi	r30, 0x5C	; 92
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	80 83       	st	Z, r24
    18d0:	11 c0       	rjmp	.+34     	; 0x18f4 <Timer_SetCompareValue+0x44>
	}

	else if(timer_ID == TIMER1_ID)			/* Set compare value for Timer1 */
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	39 f4       	brne	.+14     	; 0x18e6 <Timer_SetCompareValue+0x36>
	{
		OCR1A = compare_value;
    18d8:	ea e4       	ldi	r30, 0x4A	; 74
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <Timer_SetCompareValue+0x44>
	}

	else if(timer_ID == TIMER2_ID)			/* Set compare value for Timer2 */
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	21 f4       	brne	.+8      	; 0x18f4 <Timer_SetCompareValue+0x44>
	{
		OCR2 = compare_value;
    18ec:	e3 e4       	ldi	r30, 0x43	; 67
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
	}
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <DcMotor_Init>:
 * Initialize the DC Motor:
 * 1. Setup the DC Motor pins directions by using the GPIO driver.
 * 2. Initialize the DC Motor to STOP.
 */
void DcMotor_Init(void)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <DcMotor_Rotate>:
 * 1. Set the Motor State ( STOP --> PIN1=0 & PIN2=0  ,  CW --> PIN1=0 & PIN2=1 ,  ACW --> PIN1=1 & PIN2=0 )
 * 2. Set the Motor Speed by passing duty cycle to the PWM function.
 * Input: State ( CW or ACW or STOP ) , Speed = duty cycle
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <DcMotor_Rotate+0x6>
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	6a 83       	std	Y+2, r22	; 0x02
	if (state == STOP)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	59 f4       	brne	.+22     	; 0x1960 <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    195e:	21 c0       	rjmp	.+66     	; 0x19a2 <DcMotor_Rotate+0x6c>
	}
	else if (state == ACW)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	71 f4       	brne	.+28     	; 0x1982 <DcMotor_Rotate+0x4c>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		PWM_Timer2_Start(speed);
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <PWM_Timer2_Start>
    1980:	10 c0       	rjmp	.+32     	; 0x19a2 <DcMotor_Rotate+0x6c>

	}
	else if (state == CW)
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	88 23       	and	r24, r24
    1986:	69 f4       	brne	.+26     	; 0x19a2 <DcMotor_Rotate+0x6c>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		PWM_Timer2_Start(speed);
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <PWM_Timer2_Start>
	}

}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <KEYPAD_getPressedKey>:
/***************************************************************************************************
 *                                		Function Definitions                                  	   *
 ***************************************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <KEYPAD_getPressedKey+0x6>
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    19b8:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; ++col) /* loop for columns */
    19ba:	1b 82       	std	Y+3, r1	; 0x03
    19bc:	43 c0       	rjmp	.+134    	; 0x1a44 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin.
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID + col, PIN_OUTPUT);
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	98 2f       	mov	r25, r24
    19ca:	9c 5f       	subi	r25, 0xFC	; 252
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	69 2f       	mov	r22, r25
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if (KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 01       	movw	r18, r24
    19de:	2c 5f       	subi	r18, 0xFC	; 252
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <KEYPAD_getPressedKey+0x40>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	2a 95       	dec	r18
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <KEYPAD_getPressedKey+0x3c>
    19f0:	80 95       	com	r24
    19f2:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	69 81       	ldd	r22, Y+1	; 0x01
    19f8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
    19fc:	1a 82       	std	Y+2, r1	; 0x02
    19fe:	1c c0       	rjmp	.+56     	; 0x1a38 <KEYPAD_getPressedKey+0x8c>
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	6a 81       	ldd	r22, Y+2	; 0x02
    1a04:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1a08:	88 23       	and	r24, r24
    1a0a:	99 f4       	brne	.+38     	; 0x1a32 <KEYPAD_getPressedKey+0x86>
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	98 2f       	mov	r25, r24
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	89 0f       	add	r24, r25
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	8f 5f       	subi	r24, 0xFF	; 255
    1a36:	8a 83       	std	Y+2, r24	; 0x02
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	08 f3       	brcs	.-62     	; 0x1a00 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while (1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; ++col) /* loop for columns */
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	8f 5f       	subi	r24, 0xFF	; 255
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	84 30       	cpi	r24, 0x04	; 4
    1a48:	08 f4       	brcc	.+2      	; 0x1a4c <KEYPAD_getPressedKey+0xa0>
    1a4a:	b9 cf       	rjmp	.-142    	; 0x19be <KEYPAD_getPressedKey+0x12>
    1a4c:	b6 cf       	rjmp	.-148    	; 0x19ba <KEYPAD_getPressedKey+0xe>

00001a4e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a5c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3c 83       	std	Y+4, r19	; 0x04
    1a66:	2b 83       	std	Y+3, r18	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	88 30       	cpi	r24, 0x08	; 8
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a72:	70 c0       	rjmp	.+224    	; 0x1b54 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	3c 81       	ldd	r19, Y+4	; 0x04
    1a78:	29 30       	cpi	r18, 0x09	; 9
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	5c f5       	brge	.+86     	; 0x1ad4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	91 05       	cpc	r25, r1
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a88:	59 c0       	rjmp	.+178    	; 0x1b3c <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8e:	25 30       	cpi	r18, 0x05	; 5
    1a90:	31 05       	cpc	r19, r1
    1a92:	9c f4       	brge	.+38     	; 0x1aba <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a9e:	48 c0       	rjmp	.+144    	; 0x1b30 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa4:	23 30       	cpi	r18, 0x03	; 3
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	0c f0       	brlt	.+2      	; 0x1aac <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1aaa:	45 c0       	rjmp	.+138    	; 0x1b36 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ab6:	39 c0       	rjmp	.+114    	; 0x1b2a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ab8:	67 c0       	rjmp	.+206    	; 0x1b88 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	26 30       	cpi	r18, 0x06	; 6
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ac4:	41 c0       	rjmp	.+130    	; 0x1b48 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	87 30       	cpi	r24, 0x07	; 7
    1acc:	91 05       	cpc	r25, r1
    1ace:	0c f0       	brlt	.+2      	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ad0:	3e c0       	rjmp	.+124    	; 0x1b4e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ad2:	37 c0       	rjmp	.+110    	; 0x1b42 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	2c 30       	cpi	r18, 0x0C	; 12
    1ada:	31 05       	cpc	r19, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ade:	46 c0       	rjmp	.+140    	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	8d 30       	cpi	r24, 0x0D	; 13
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	5c f4       	brge	.+22     	; 0x1b00 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1aea:	2b 81       	ldd	r18, Y+3	; 0x03
    1aec:	3c 81       	ldd	r19, Y+4	; 0x04
    1aee:	2a 30       	cpi	r18, 0x0A	; 10
    1af0:	31 05       	cpc	r19, r1
    1af2:	b1 f1       	breq	.+108    	; 0x1b60 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	8b 30       	cpi	r24, 0x0B	; 11
    1afa:	91 05       	cpc	r25, r1
    1afc:	a4 f5       	brge	.+104    	; 0x1b66 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1afe:	2d c0       	rjmp	.+90     	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	2e 30       	cpi	r18, 0x0E	; 14
    1b06:	31 05       	cpc	r19, r1
    1b08:	b9 f1       	breq	.+110    	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	8e 30       	cpi	r24, 0x0E	; 14
    1b10:	91 05       	cpc	r25, r1
    1b12:	7c f1       	brlt	.+94     	; 0x1b72 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	2f 30       	cpi	r18, 0x0F	; 15
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	79 f1       	breq	.+94     	; 0x1b7c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	80 31       	cpi	r24, 0x10	; 16
    1b24:	91 05       	cpc	r25, r1
    1b26:	69 f1       	breq	.+90     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b28:	2f c0       	rjmp	.+94     	; 0x1b88 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7; 		break;
    1b2a:	87 e0       	ldi	r24, 0x07	; 7
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	2e c0       	rjmp	.+92     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 2: keypad_button = 8; 		break;
    1b30:	88 e0       	ldi	r24, 0x08	; 8
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	2b c0       	rjmp	.+86     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 3: keypad_button = 9; 		break;
    1b36:	89 e0       	ldi	r24, 0x09	; 9
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	28 c0       	rjmp	.+80     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 4: keypad_button = '%'; 	break; // ASCII Code of %
    1b3c:	85 e2       	ldi	r24, 0x25	; 37
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	25 c0       	rjmp	.+74     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 5: keypad_button = 4; 		break;
    1b42:	84 e0       	ldi	r24, 0x04	; 4
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	22 c0       	rjmp	.+68     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 6: keypad_button = 5; 		break;
    1b48:	85 e0       	ldi	r24, 0x05	; 5
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	1f c0       	rjmp	.+62     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 7: keypad_button = 6; 		break;
    1b4e:	86 e0       	ldi	r24, 0x06	; 6
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	1c c0       	rjmp	.+56     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 8: keypad_button = '*'; 	break; /* ASCII Code of '*' */
    1b54:	8a e2       	ldi	r24, 0x2A	; 42
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	19 c0       	rjmp	.+50     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 9: keypad_button = 1; 		break;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	16 c0       	rjmp	.+44     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 10: keypad_button = 2; 	break;
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	13 c0       	rjmp	.+38     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 11: keypad_button = 3; 	break;
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	10 c0       	rjmp	.+32     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 12: keypad_button = '-'; 	break; /* ASCII Code of '-' */
    1b6c:	8d e2       	ldi	r24, 0x2D	; 45
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 13: keypad_button = 13; 	break;  /* ASCII of Enter */
    1b72:	8d e0       	ldi	r24, 0x0D	; 13
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	0a c0       	rjmp	.+20     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 14: keypad_button = 0; 	break;
    1b78:	19 82       	std	Y+1, r1	; 0x01
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 15: keypad_button = '='; 	break; /* ASCII Code of '=' */
    1b7c:	8d e3       	ldi	r24, 0x3D	; 61
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 16: keypad_button = '+'; 	break; /* ASCII Code of '+' */
    1b82:	8b e2       	ldi	r24, 0x2B	; 43
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		default: keypad_button = button_number;  	break;
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
	}
	return keypad_button;
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1ba4:	83 e0       	ldi	r24, 0x03	; 3
    1ba6:	64 e0       	ldi	r22, 0x04	; 4
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	65 e0       	ldi	r22, 0x05	; 5
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	66 e0       	ldi	r22, 0x06	; 6
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	6f ef       	ldi	r22, 0xFF	; 255
    1bc6:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);		/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1bca:	88 e3       	ldi	r24, 0x38	; 56
    1bcc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF);					/* cursor off */
    1bd0:	8c e0       	ldi	r24, 0x0C	; 12
    1bd2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);					/* clear LCD at the beginning */
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
}
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	e9 97       	sbiw	r28, 0x39	; 57
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	64 e0       	ldi	r22, 0x04	; 4
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	8d ab       	std	Y+53, r24	; 0x35
    1c16:	9e ab       	std	Y+54, r25	; 0x36
    1c18:	af ab       	std	Y+55, r26	; 0x37
    1c1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c20:	8f a9       	ldd	r24, Y+55	; 0x37
    1c22:	98 ad       	ldd	r25, Y+56	; 0x38
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	89 ab       	std	Y+49, r24	; 0x31
    1c36:	9a ab       	std	Y+50, r25	; 0x32
    1c38:	ab ab       	std	Y+51, r26	; 0x33
    1c3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c40:	8b a9       	ldd	r24, Y+51	; 0x33
    1c42:	9c a9       	ldd	r25, Y+52	; 0x34
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_sendCommand+0x7c>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	98 ab       	std	Y+48, r25	; 0x30
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c60:	7a a9       	ldd	r23, Y+50	; 0x32
    1c62:	8b a9       	ldd	r24, Y+51	; 0x33
    1c64:	9c a9       	ldd	r25, Y+52	; 0x34
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6d a9       	ldd	r22, Y+53	; 0x35
    1c78:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	98 ab       	std	Y+48, r25	; 0x30
    1c9c:	8f a7       	std	Y+47, r24	; 0x2f
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_sendCommand+0xdc>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9e a7       	std	Y+46, r25	; 0x2e
    1ca6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1caa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_sendCommand+0xca>
    1cb0:	9e a7       	std	Y+46, r25	; 0x2e
    1cb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	98 ab       	std	Y+48, r25	; 0x30
    1cbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_sendCommand+0xbe>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cce:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	98 ab       	std	Y+48, r25	; 0x30
    1cda:	8f a7       	std	Y+47, r24	; 0x2f
    1cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cde:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce0:	9c a7       	std	Y+44, r25	; 0x2c
    1ce2:	8b a7       	std	Y+43, r24	; 0x2b
    1ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_sendCommand+0x106>
    1cec:	9c a7       	std	Y+44, r25	; 0x2c
    1cee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	66 e0       	ldi	r22, 0x06	; 6
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e8       	ldi	r26, 0x80	; 128
    1d00:	bf e3       	ldi	r27, 0x3F	; 63
    1d02:	8f a3       	std	Y+39, r24	; 0x27
    1d04:	98 a7       	std	Y+40, r25	; 0x28
    1d06:	a9 a7       	std	Y+41, r26	; 0x29
    1d08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a ef       	ldi	r20, 0xFA	; 250
    1d18:	54 e4       	ldi	r21, 0x44	; 68
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8b a3       	std	Y+35, r24	; 0x23
    1d24:	9c a3       	std	Y+36, r25	; 0x24
    1d26:	ad a3       	std	Y+37, r26	; 0x25
    1d28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d30:	9e a1       	ldd	r25, Y+38	; 0x26
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_sendCommand+0x16a>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9a a3       	std	Y+34, r25	; 0x22
    1d48:	89 a3       	std	Y+33, r24	; 0x21
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1d4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d50:	8d a1       	ldd	r24, Y+37	; 0x25
    1d52:	9e a1       	ldd	r25, Y+38	; 0x26
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6f a1       	ldd	r22, Y+39	; 0x27
    1d66:	78 a5       	ldd	r23, Y+40	; 0x28
    1d68:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <LCD_sendCommand+0x1ca>
    1d8e:	88 ec       	ldi	r24, 0xC8	; 200
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	98 a3       	std	Y+32, r25	; 0x20
    1d94:	8f 8f       	std	Y+31, r24	; 0x1f
    1d96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d98:	98 a1       	ldd	r25, Y+32	; 0x20
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_sendCommand+0x1b8>
    1d9e:	98 a3       	std	Y+32, r25	; 0x20
    1da0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	89 a1       	ldd	r24, Y+33	; 0x21
    1da4:	9a a1       	ldd	r25, Y+34	; 0x22
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9a a3       	std	Y+34, r25	; 0x22
    1daa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	89 a1       	ldd	r24, Y+33	; 0x21
    1dae:	9a a1       	ldd	r25, Y+34	; 0x22
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <LCD_sendCommand+0x1ac>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	6b a1       	ldd	r22, Y+35	; 0x23
    1db8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dba:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
    1dca:	89 a1       	ldd	r24, Y+33	; 0x21
    1dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dce:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd0:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_sendCommand+0x1f4>
    1dda:	9e 8f       	std	Y+30, r25	; 0x1e
    1ddc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	69 ad       	ldd	r22, Y+57	; 0x39
    1de2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	89 8f       	std	Y+25, r24	; 0x19
    1df0:	9a 8f       	std	Y+26, r25	; 0x1a
    1df2:	ab 8f       	std	Y+27, r26	; 0x1b
    1df4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	69 8d       	ldd	r22, Y+25	; 0x19
    1df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8d 8b       	std	Y+21, r24	; 0x15
    1e10:	9e 8b       	std	Y+22, r25	; 0x16
    1e12:	af 8b       	std	Y+23, r26	; 0x17
    1e14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e16:	6d 89       	ldd	r22, Y+21	; 0x15
    1e18:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_sendCommand+0x256>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9c 8b       	std	Y+20, r25	; 0x14
    1e34:	8b 8b       	std	Y+19, r24	; 0x13
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1e38:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	69 8d       	ldd	r22, Y+25	; 0x19
    1e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <LCD_sendCommand+0x2b6>
    1e7a:	88 ec       	ldi	r24, 0xC8	; 200
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9a 8b       	std	Y+18, r25	; 0x12
    1e80:	89 8b       	std	Y+17, r24	; 0x11
    1e82:	89 89       	ldd	r24, Y+17	; 0x11
    1e84:	9a 89       	ldd	r25, Y+18	; 0x12
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_sendCommand+0x2a4>
    1e8a:	9a 8b       	std	Y+18, r25	; 0x12
    1e8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e90:	9c 89       	ldd	r25, Y+20	; 0x14
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9c 8b       	std	Y+20, r25	; 0x14
    1e96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <LCD_sendCommand+0x298>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9c 8b       	std	Y+20, r25	; 0x14
    1eb4:	8b 8b       	std	Y+19, r24	; 0x13
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	98 8b       	std	Y+16, r25	; 0x10
    1ebc:	8f 87       	std	Y+15, r24	; 0x0f
    1ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec0:	98 89       	ldd	r25, Y+16	; 0x10
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_sendCommand+0x2e0>
    1ec6:	98 8b       	std	Y+16, r25	; 0x10
    1ec8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	66 e0       	ldi	r22, 0x06	; 6
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	bf e3       	ldi	r27, 0x3F	; 63
    1edc:	8b 87       	std	Y+11, r24	; 0x0b
    1ede:	9c 87       	std	Y+12, r25	; 0x0c
    1ee0:	ad 87       	std	Y+13, r26	; 0x0d
    1ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a ef       	ldi	r20, 0xFA	; 250
    1ef2:	54 e4       	ldi	r21, 0x44	; 68
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8f 83       	std	Y+7, r24	; 0x07
    1efe:	98 87       	std	Y+8, r25	; 0x08
    1f00:	a9 87       	std	Y+9, r26	; 0x09
    1f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <LCD_sendCommand+0x344>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <LCD_sendCommand+0x3a4>
    1f68:	88 ec       	ldi	r24, 0xC8	; 200
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9c 83       	std	Y+4, r25	; 0x04
    1f6e:	8b 83       	std	Y+3, r24	; 0x03
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_sendCommand+0x392>
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <LCD_sendCommand+0x386>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_sendCommand+0x3ce>
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
    1fb8:	e9 96       	adiw	r28, 0x39	; 57
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	e9 97       	sbiw	r28, 0x39	; 57
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	65 e0       	ldi	r22, 0x05	; 5
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a0 e8       	ldi	r26, 0x80	; 128
    1ffa:	bf e3       	ldi	r27, 0x3F	; 63
    1ffc:	8d ab       	std	Y+53, r24	; 0x35
    1ffe:	9e ab       	std	Y+54, r25	; 0x36
    2000:	af ab       	std	Y+55, r26	; 0x37
    2002:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2004:	6d a9       	ldd	r22, Y+53	; 0x35
    2006:	7e a9       	ldd	r23, Y+54	; 0x36
    2008:	8f a9       	ldd	r24, Y+55	; 0x37
    200a:	98 ad       	ldd	r25, Y+56	; 0x38
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	4a ef       	ldi	r20, 0xFA	; 250
    2012:	54 e4       	ldi	r21, 0x44	; 68
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 ab       	std	Y+49, r24	; 0x31
    201e:	9a ab       	std	Y+50, r25	; 0x32
    2020:	ab ab       	std	Y+51, r26	; 0x33
    2022:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2024:	69 a9       	ldd	r22, Y+49	; 0x31
    2026:	7a a9       	ldd	r23, Y+50	; 0x32
    2028:	8b a9       	ldd	r24, Y+51	; 0x33
    202a:	9c a9       	ldd	r25, Y+52	; 0x34
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	2c f4       	brge	.+10     	; 0x2046 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	98 ab       	std	Y+48, r25	; 0x30
    2042:	8f a7       	std	Y+47, r24	; 0x2f
    2044:	3f c0       	rjmp	.+126    	; 0x20c4 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2046:	69 a9       	ldd	r22, Y+49	; 0x31
    2048:	7a a9       	ldd	r23, Y+50	; 0x32
    204a:	8b a9       	ldd	r24, Y+51	; 0x33
    204c:	9c a9       	ldd	r25, Y+52	; 0x34
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	3f ef       	ldi	r19, 0xFF	; 255
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	57 e4       	ldi	r21, 0x47	; 71
    2056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205a:	18 16       	cp	r1, r24
    205c:	4c f5       	brge	.+82     	; 0x20b0 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205e:	6d a9       	ldd	r22, Y+53	; 0x35
    2060:	7e a9       	ldd	r23, Y+54	; 0x36
    2062:	8f a9       	ldd	r24, Y+55	; 0x37
    2064:	98 ad       	ldd	r25, Y+56	; 0x38
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e2       	ldi	r20, 0x20	; 32
    206c:	51 e4       	ldi	r21, 0x41	; 65
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	98 ab       	std	Y+48, r25	; 0x30
    2084:	8f a7       	std	Y+47, r24	; 0x2f
    2086:	0f c0       	rjmp	.+30     	; 0x20a6 <LCD_displayCharacter+0xdc>
    2088:	88 ec       	ldi	r24, 0xC8	; 200
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e a7       	std	Y+46, r25	; 0x2e
    208e:	8d a7       	std	Y+45, r24	; 0x2d
    2090:	8d a5       	ldd	r24, Y+45	; 0x2d
    2092:	9e a5       	ldd	r25, Y+46	; 0x2e
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_displayCharacter+0xca>
    2098:	9e a7       	std	Y+46, r25	; 0x2e
    209a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209c:	8f a5       	ldd	r24, Y+47	; 0x2f
    209e:	98 a9       	ldd	r25, Y+48	; 0x30
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	98 ab       	std	Y+48, r25	; 0x30
    20a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a8:	98 a9       	ldd	r25, Y+48	; 0x30
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	69 f7       	brne	.-38     	; 0x2088 <LCD_displayCharacter+0xbe>
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b0:	69 a9       	ldd	r22, Y+49	; 0x31
    20b2:	7a a9       	ldd	r23, Y+50	; 0x32
    20b4:	8b a9       	ldd	r24, Y+51	; 0x33
    20b6:	9c a9       	ldd	r25, Y+52	; 0x34
    20b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	98 ab       	std	Y+48, r25	; 0x30
    20c2:	8f a7       	std	Y+47, r24	; 0x2f
    20c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c6:	98 a9       	ldd	r25, Y+48	; 0x30
    20c8:	9c a7       	std	Y+44, r25	; 0x2c
    20ca:	8b a7       	std	Y+43, r24	; 0x2b
    20cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_displayCharacter+0x106>
    20d4:	9c a7       	std	Y+44, r25	; 0x2c
    20d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	8f a3       	std	Y+39, r24	; 0x27
    20ec:	98 a7       	std	Y+40, r25	; 0x28
    20ee:	a9 a7       	std	Y+41, r26	; 0x29
    20f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6f a1       	ldd	r22, Y+39	; 0x27
    20f4:	78 a5       	ldd	r23, Y+40	; 0x28
    20f6:	89 a5       	ldd	r24, Y+41	; 0x29
    20f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a ef       	ldi	r20, 0xFA	; 250
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8b a3       	std	Y+35, r24	; 0x23
    210c:	9c a3       	std	Y+36, r25	; 0x24
    210e:	ad a3       	std	Y+37, r26	; 0x25
    2110:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2112:	6b a1       	ldd	r22, Y+35	; 0x23
    2114:	7c a1       	ldd	r23, Y+36	; 0x24
    2116:	8d a1       	ldd	r24, Y+37	; 0x25
    2118:	9e a1       	ldd	r25, Y+38	; 0x26
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9a a3       	std	Y+34, r25	; 0x22
    2130:	89 a3       	std	Y+33, r24	; 0x21
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6f a1       	ldd	r22, Y+39	; 0x27
    214e:	78 a5       	ldd	r23, Y+40	; 0x28
    2150:	89 a5       	ldd	r24, Y+41	; 0x29
    2152:	9a a5       	ldd	r25, Y+42	; 0x2a
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_displayCharacter+0x1ca>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	98 a3       	std	Y+32, r25	; 0x20
    217c:	8f 8f       	std	Y+31, r24	; 0x1f
    217e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2180:	98 a1       	ldd	r25, Y+32	; 0x20
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_displayCharacter+0x1b8>
    2186:	98 a3       	std	Y+32, r25	; 0x20
    2188:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	89 a1       	ldd	r24, Y+33	; 0x21
    218c:	9a a1       	ldd	r25, Y+34	; 0x22
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9a a3       	std	Y+34, r25	; 0x22
    2192:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	89 a1       	ldd	r24, Y+33	; 0x21
    2196:	9a a1       	ldd	r25, Y+34	; 0x22
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_displayCharacter+0x1ac>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6b a1       	ldd	r22, Y+35	; 0x23
    21a0:	7c a1       	ldd	r23, Y+36	; 0x24
    21a2:	8d a1       	ldd	r24, Y+37	; 0x25
    21a4:	9e a1       	ldd	r25, Y+38	; 0x26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9a a3       	std	Y+34, r25	; 0x22
    21b0:	89 a3       	std	Y+33, r24	; 0x21
    21b2:	89 a1       	ldd	r24, Y+33	; 0x21
    21b4:	9a a1       	ldd	r25, Y+34	; 0x22
    21b6:	9e 8f       	std	Y+30, r25	; 0x1e
    21b8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_displayCharacter+0x1f4>
    21c2:	9e 8f       	std	Y+30, r25	; 0x1e
    21c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	69 ad       	ldd	r22, Y+57	; 0x39
    21ca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 e8       	ldi	r26, 0x80	; 128
    21d4:	bf e3       	ldi	r27, 0x3F	; 63
    21d6:	89 8f       	std	Y+25, r24	; 0x19
    21d8:	9a 8f       	std	Y+26, r25	; 0x1a
    21da:	ab 8f       	std	Y+27, r26	; 0x1b
    21dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21de:	69 8d       	ldd	r22, Y+25	; 0x19
    21e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a ef       	ldi	r20, 0xFA	; 250
    21ec:	54 e4       	ldi	r21, 0x44	; 68
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8d 8b       	std	Y+21, r24	; 0x15
    21f8:	9e 8b       	std	Y+22, r25	; 0x16
    21fa:	af 8b       	std	Y+23, r26	; 0x17
    21fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2200:	7e 89       	ldd	r23, Y+22	; 0x16
    2202:	8f 89       	ldd	r24, Y+23	; 0x17
    2204:	98 8d       	ldd	r25, Y+24	; 0x18
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	2c f4       	brge	.+10     	; 0x2220 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9c 8b       	std	Y+20, r25	; 0x14
    221c:	8b 8b       	std	Y+19, r24	; 0x13
    221e:	3f c0       	rjmp	.+126    	; 0x229e <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	4f e7       	ldi	r20, 0x7F	; 127
    222e:	57 e4       	ldi	r21, 0x47	; 71
    2230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2234:	18 16       	cp	r1, r24
    2236:	4c f5       	brge	.+82     	; 0x228a <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2238:	69 8d       	ldd	r22, Y+25	; 0x19
    223a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    223e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9c 8b       	std	Y+20, r25	; 0x14
    225e:	8b 8b       	std	Y+19, r24	; 0x13
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <LCD_displayCharacter+0x2b6>
    2262:	88 ec       	ldi	r24, 0xC8	; 200
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9a 8b       	std	Y+18, r25	; 0x12
    2268:	89 8b       	std	Y+17, r24	; 0x11
    226a:	89 89       	ldd	r24, Y+17	; 0x11
    226c:	9a 89       	ldd	r25, Y+18	; 0x12
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD_displayCharacter+0x2a4>
    2272:	9a 8b       	std	Y+18, r25	; 0x12
    2274:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9c 8b       	std	Y+20, r25	; 0x14
    227e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	8b 89       	ldd	r24, Y+19	; 0x13
    2282:	9c 89       	ldd	r25, Y+20	; 0x14
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	69 f7       	brne	.-38     	; 0x2262 <LCD_displayCharacter+0x298>
    2288:	14 c0       	rjmp	.+40     	; 0x22b2 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228a:	6d 89       	ldd	r22, Y+21	; 0x15
    228c:	7e 89       	ldd	r23, Y+22	; 0x16
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9c 8b       	std	Y+20, r25	; 0x14
    229c:	8b 8b       	std	Y+19, r24	; 0x13
    229e:	8b 89       	ldd	r24, Y+19	; 0x13
    22a0:	9c 89       	ldd	r25, Y+20	; 0x14
    22a2:	98 8b       	std	Y+16, r25	; 0x10
    22a4:	8f 87       	std	Y+15, r24	; 0x0f
    22a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a8:	98 89       	ldd	r25, Y+16	; 0x10
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_displayCharacter+0x2e0>
    22ae:	98 8b       	std	Y+16, r25	; 0x10
    22b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	66 e0       	ldi	r22, 0x06	; 6
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	8b 87       	std	Y+11, r24	; 0x0b
    22c6:	9c 87       	std	Y+12, r25	; 0x0c
    22c8:	ad 87       	std	Y+13, r26	; 0x0d
    22ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a ef       	ldi	r20, 0xFA	; 250
    22da:	54 e4       	ldi	r21, 0x44	; 68
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8f 83       	std	Y+7, r24	; 0x07
    22e6:	98 87       	std	Y+8, r25	; 0x08
    22e8:	a9 87       	std	Y+9, r26	; 0x09
    22ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ec:	6f 81       	ldd	r22, Y+7	; 0x07
    22ee:	78 85       	ldd	r23, Y+8	; 0x08
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_displayCharacter+0x344>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6b 85       	ldd	r22, Y+11	; 0x0b
    2328:	7c 85       	ldd	r23, Y+12	; 0x0c
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_displayCharacter+0x3a4>
    2350:	88 ec       	ldi	r24, 0xC8	; 200
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	8b 83       	std	Y+3, r24	; 0x03
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_displayCharacter+0x392>
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	9e 81       	ldd	r25, Y+6	; 0x06
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_displayCharacter+0x386>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_displayCharacter+0x3ce>
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
    23a0:	e9 96       	adiw	r28, 0x39	; 57
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <LCD_displayString+0x6>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	0a c0       	rjmp	.+20     	; 0x23d6 <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    23c2:	e9 81       	ldd	r30, Y+1	; 0x01
    23c4:	fa 81       	ldd	r31, Y+2	; 0x02
    23c6:	80 81       	ld	r24, Z
    23c8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <LCD_displayCharacter>
		Str++;
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    23d6:	e9 81       	ldd	r30, Y+1	; 0x01
    23d8:	fa 81       	ldd	r31, Y+2	; 0x02
    23da:	80 81       	ld	r24, Z
    23dc:	88 23       	and	r24, r24
    23de:	89 f7       	brne	.-30     	; 0x23c2 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(Str[i]);
		++i;
	}
	 *********************************************************/
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <LCD_moveCursor+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <LCD_moveCursor+0x8>
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	3d 83       	std	Y+5, r19	; 0x05
    2404:	2c 83       	std	Y+4, r18	; 0x04
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	c1 f0       	breq	.+48     	; 0x2440 <LCD_moveCursor+0x56>
    2410:	2c 81       	ldd	r18, Y+4	; 0x04
    2412:	3d 81       	ldd	r19, Y+5	; 0x05
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	2c f4       	brge	.+10     	; 0x2424 <LCD_moveCursor+0x3a>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	61 f0       	breq	.+24     	; 0x243a <LCD_moveCursor+0x50>
    2422:	19 c0       	rjmp	.+50     	; 0x2456 <LCD_moveCursor+0x6c>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	69 f0       	breq	.+26     	; 0x2448 <LCD_moveCursor+0x5e>
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	91 05       	cpc	r25, r1
    2436:	61 f0       	breq	.+24     	; 0x2450 <LCD_moveCursor+0x66>
    2438:	0e c0       	rjmp	.+28     	; 0x2456 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;			break;
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	0b c0       	rjmp	.+22     	; 0x2456 <LCD_moveCursor+0x6c>
	case 1:
		lcd_memory_address=col+0x40;	break;
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	80 5c       	subi	r24, 0xC0	; 192
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <LCD_moveCursor+0x6c>
	case 2:
		lcd_memory_address=col+0x10;	break;
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	80 5f       	subi	r24, 0xF0	; 240
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <LCD_moveCursor+0x6c>
	case 3:
		lcd_memory_address=col+0x50;	break;
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	80 5b       	subi	r24, 0xB0	; 176
    2454:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	80 68       	ori	r24, 0x80	; 128
    245a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
}
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_displayStringRowColumn+0x6>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_displayStringRowColumn+0x8>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	6a 83       	std	Y+2, r22	; 0x02
    247e:	5c 83       	std	Y+4, r21	; 0x04
    2480:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); 		/* go to to the required LCD position */
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	6a 81       	ldd	r22, Y+2	; 0x02
    2486:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString(Str); 		/* display the string */
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int num)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	62 97       	sbiw	r28, 0x12	; 18
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	9a 8b       	std	Y+18, r25	; 0x12
    24b6:	89 8b       	std	Y+17, r24	; 0x11
	   char buff[16]; /* String to hold the ascii result */
	   itoa(num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	9a 89       	ldd	r25, Y+18	; 0x12
    24bc:	9e 01       	movw	r18, r28
    24be:	2f 5f       	subi	r18, 0xFF	; 255
    24c0:	3f 4f       	sbci	r19, 0xFF	; 255
    24c2:	b9 01       	movw	r22, r18
    24c4:	4a e0       	ldi	r20, 0x0A	; 10
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	0e 94 0c 1b 	call	0x3618	; 0x3618 <itoa>
	   LCD_displayString(buff); /* Display the string */
    24cc:	ce 01       	movw	r24, r28
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
}
    24d4:	62 96       	adiw	r28, 0x12	; 18
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <LCD_sendCommand>
}
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <main>:
void controlLEDList();
void flashLED();
void INT0_Init();


int main(void){
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62

//	DDRA = 0xF0;
//	PORTA = 0x0F;
	GPIO_setupPortDirection(PORTA_ID, PORT_OUTPUT);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	6f ef       	ldi	r22, 0xFF	; 255
    2506:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
	GPIO_writePort(PORTA_ID, LOGIC_HIGH);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

	LCD_init();
    2512:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_init>
	INT0_Init();
    2516:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <INT0_Init>
	DcMotor_Init();
    251a:	0e 94 80 0c 	call	0x1900	; 0x1900 <DcMotor_Init>
	sei();
    251e:	78 94       	sei

	Main_Menu();
    2520:	0e 94 99 12 	call	0x2532	; 0x2532 <Main_Menu>
	while(1){

		if(flagCorrectPass==0){
    2524:	80 91 75 01 	lds	r24, 0x0175
    2528:	88 23       	and	r24, r24
    252a:	e1 f7       	brne	.-8      	; 0x2524 <main+0x2a>
			Main_Menu();
    252c:	0e 94 99 12 	call	0x2532	; 0x2532 <Main_Menu>
    2530:	f9 cf       	rjmp	.-14     	; 0x2524 <main+0x2a>

00002532 <Main_Menu>:

	}

}

void Main_Menu(){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	2e 97       	sbiw	r28, 0x0e	; 14
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(0, 0);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("1)Edit Password");
    254e:	80 e6       	ldi	r24, 0x60	; 96
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("2)Enter Password");
    255e:	80 e7       	ldi	r24, 0x70	; 112
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	key=KEYPAD_getPressedKey();
    2566:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <KEYPAD_getPressedKey>
    256a:	80 93 73 01 	sts	0x0173, r24
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	aa e7       	ldi	r26, 0x7A	; 122
    2574:	b3 e4       	ldi	r27, 0x43	; 67
    2576:	8b 87       	std	Y+11, r24	; 0x0b
    2578:	9c 87       	std	Y+12, r25	; 0x0c
    257a:	ad 87       	std	Y+13, r26	; 0x0d
    257c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2580:	7c 85       	ldd	r23, Y+12	; 0x0c
    2582:	8d 85       	ldd	r24, Y+13	; 0x0d
    2584:	9e 85       	ldd	r25, Y+14	; 0x0e
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a ef       	ldi	r20, 0xFA	; 250
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8f 83       	std	Y+7, r24	; 0x07
    2598:	98 87       	std	Y+8, r25	; 0x08
    259a:	a9 87       	std	Y+9, r26	; 0x09
    259c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <Main_Menu+0x8e>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	3f c0       	rjmp	.+126    	; 0x263e <Main_Menu+0x10c>
	else if (__tmp > 65535)
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	4c f5       	brge	.+82     	; 0x262a <Main_Menu+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <Main_Menu+0xee>
    2602:	88 ec       	ldi	r24, 0xC8	; 200
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9c 83       	std	Y+4, r25	; 0x04
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <Main_Menu+0xdc>
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <Main_Menu+0xd0>
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <Main_Menu+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <Main_Menu+0x118>
    264e:	9a 83       	std	Y+2, r25	; 0x02
    2650:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	if(key==1){
    2652:	80 91 73 01 	lds	r24, 0x0173
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	19 f4       	brne	.+6      	; 0x2660 <Main_Menu+0x12e>
		Set_Password();
    265a:	0e 94 42 13 	call	0x2684	; 0x2684 <Set_Password>
    265e:	09 c0       	rjmp	.+18     	; 0x2672 <Main_Menu+0x140>
	}else if(key==2){
    2660:	80 91 73 01 	lds	r24, 0x0173
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	19 f4       	brne	.+6      	; 0x266e <Main_Menu+0x13c>
		Enter_Password();
    2668:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <Enter_Password>
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <Main_Menu+0x140>
	}else{
		Main_Menu();
    266e:	0e 94 99 12 	call	0x2532	; 0x2532 <Main_Menu>
	}
}
    2672:	2e 96       	adiw	r28, 0x0e	; 14
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <Set_Password>:

void Set_Password(){
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	2e 97       	sbiw	r28, 0x0e	; 14
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    2698:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
    26a4:	8b c0       	rjmp	.+278    	; 0x27bc <Set_Password+0x138>

	while(i<PASSWORD_LENGTH){

		key=KEYPAD_getPressedKey();
    26a6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <KEYPAD_getPressedKey>
    26aa:	80 93 73 01 	sts	0x0173, r24
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	aa e7       	ldi	r26, 0x7A	; 122
    26b4:	b3 e4       	ldi	r27, 0x43	; 67
    26b6:	8b 87       	std	Y+11, r24	; 0x0b
    26b8:	9c 87       	std	Y+12, r25	; 0x0c
    26ba:	ad 87       	std	Y+13, r26	; 0x0d
    26bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a ef       	ldi	r20, 0xFA	; 250
    26cc:	54 e4       	ldi	r21, 0x44	; 68
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8f 83       	std	Y+7, r24	; 0x07
    26d8:	98 87       	std	Y+8, r25	; 0x08
    26da:	a9 87       	std	Y+9, r26	; 0x09
    26dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26de:	6f 81       	ldd	r22, Y+7	; 0x07
    26e0:	78 85       	ldd	r23, Y+8	; 0x08
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <Set_Password+0x7c>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <Set_Password+0xfa>
	else if (__tmp > 65535)
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <Set_Password+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <Set_Password+0xdc>
    2742:	88 ec       	ldi	r24, 0xC8	; 200
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	8b 83       	std	Y+3, r24	; 0x03
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <Set_Password+0xca>
    2752:	9c 83       	std	Y+4, r25	; 0x04
    2754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <Set_Password+0xbe>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <Set_Password+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <Set_Password+0x106>
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_intgerToString(key);
    2792:	80 91 73 01 	lds	r24, 0x0173
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_intgerToString>
		Password[i]=key;
    279e:	80 91 74 01 	lds	r24, 0x0174
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	20 91 73 01 	lds	r18, 0x0173
    27aa:	fc 01       	movw	r30, r24
    27ac:	e2 59       	subi	r30, 0x92	; 146
    27ae:	fe 4f       	sbci	r31, 0xFE	; 254
    27b0:	20 83       	st	Z, r18
		i++;
    27b2:	80 91 74 01 	lds	r24, 0x0174
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	80 93 74 01 	sts	0x0174, r24
void Set_Password(){

	LCD_clearScreen();
	LCD_moveCursor(0, 0);

	while(i<PASSWORD_LENGTH){
    27bc:	80 91 74 01 	lds	r24, 0x0174
    27c0:	84 30       	cpi	r24, 0x04	; 4
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <Set_Password+0x142>
    27c4:	70 cf       	rjmp	.-288    	; 0x26a6 <Set_Password+0x22>
		_delay_ms(250);
		LCD_intgerToString(key);
		Password[i]=key;
		i++;
	}
	i=0;
    27c6:	10 92 74 01 	sts	0x0174, r1
	Main_Menu();
    27ca:	0e 94 99 12 	call	0x2532	; 0x2532 <Main_Menu>
}
    27ce:	2e 96       	adiw	r28, 0x0e	; 14
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <Enter_Password>:

uint8 Enter_Password(){
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	af 97       	sbiw	r28, 0x2f	; 47
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61

	uint8 enteredPassword[PASSWORD_LENGTH]={0};
    27f8:	1b a6       	std	Y+43, r1	; 0x2b
    27fa:	1c a6       	std	Y+44, r1	; 0x2c
    27fc:	1d a6       	std	Y+45, r1	; 0x2d
    27fe:	1e a6       	std	Y+46, r1	; 0x2e
	flagCorrectPass=0;
    2800:	10 92 75 01 	sts	0x0175, r1

	LCD_clearScreen();
    2804:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
    2810:	92 c0       	rjmp	.+292    	; 0x2936 <Enter_Password+0x156>

	while(i<PASSWORD_LENGTH){
		enteredPassword[i]=KEYPAD_getPressedKey();
    2812:	80 91 74 01 	lds	r24, 0x0174
    2816:	08 2f       	mov	r16, r24
    2818:	10 e0       	ldi	r17, 0x00	; 0
    281a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <KEYPAD_getPressedKey>
    281e:	28 2f       	mov	r18, r24
    2820:	ce 01       	movw	r24, r28
    2822:	8b 96       	adiw	r24, 0x2b	; 43
    2824:	fc 01       	movw	r30, r24
    2826:	e0 0f       	add	r30, r16
    2828:	f1 1f       	adc	r31, r17
    282a:	20 83       	st	Z, r18
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	aa e7       	ldi	r26, 0x7A	; 122
    2832:	b3 e4       	ldi	r27, 0x43	; 67
    2834:	8f a3       	std	Y+39, r24	; 0x27
    2836:	98 a7       	std	Y+40, r25	; 0x28
    2838:	a9 a7       	std	Y+41, r26	; 0x29
    283a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	6f a1       	ldd	r22, Y+39	; 0x27
    283e:	78 a5       	ldd	r23, Y+40	; 0x28
    2840:	89 a5       	ldd	r24, Y+41	; 0x29
    2842:	9a a5       	ldd	r25, Y+42	; 0x2a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a ef       	ldi	r20, 0xFA	; 250
    284a:	54 e4       	ldi	r21, 0x44	; 68
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8b a3       	std	Y+35, r24	; 0x23
    2856:	9c a3       	std	Y+36, r25	; 0x24
    2858:	ad a3       	std	Y+37, r26	; 0x25
    285a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    285c:	6b a1       	ldd	r22, Y+35	; 0x23
    285e:	7c a1       	ldd	r23, Y+36	; 0x24
    2860:	8d a1       	ldd	r24, Y+37	; 0x25
    2862:	9e a1       	ldd	r25, Y+38	; 0x26
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	2c f4       	brge	.+10     	; 0x287e <Enter_Password+0x9e>
		__ticks = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9a a3       	std	Y+34, r25	; 0x22
    287a:	89 a3       	std	Y+33, r24	; 0x21
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <Enter_Password+0x11c>
	else if (__tmp > 65535)
    287e:	6b a1       	ldd	r22, Y+35	; 0x23
    2880:	7c a1       	ldd	r23, Y+36	; 0x24
    2882:	8d a1       	ldd	r24, Y+37	; 0x25
    2884:	9e a1       	ldd	r25, Y+38	; 0x26
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	4c f5       	brge	.+82     	; 0x28e8 <Enter_Password+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	6f a1       	ldd	r22, Y+39	; 0x27
    2898:	78 a5       	ldd	r23, Y+40	; 0x28
    289a:	89 a5       	ldd	r24, Y+41	; 0x29
    289c:	9a a5       	ldd	r25, Y+42	; 0x2a
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
    28be:	0f c0       	rjmp	.+30     	; 0x28de <Enter_Password+0xfe>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	98 a3       	std	Y+32, r25	; 0x20
    28c6:	8f 8f       	std	Y+31, r24	; 0x1f
    28c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ca:	98 a1       	ldd	r25, Y+32	; 0x20
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <Enter_Password+0xec>
    28d0:	98 a3       	std	Y+32, r25	; 0x20
    28d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9a a3       	std	Y+34, r25	; 0x22
    28dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	89 a1       	ldd	r24, Y+33	; 0x21
    28e0:	9a a1       	ldd	r25, Y+34	; 0x22
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <Enter_Password+0xe0>
    28e6:	14 c0       	rjmp	.+40     	; 0x2910 <Enter_Password+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ea:	7c a1       	ldd	r23, Y+36	; 0x24
    28ec:	8d a1       	ldd	r24, Y+37	; 0x25
    28ee:	9e a1       	ldd	r25, Y+38	; 0x26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
    28fc:	89 a1       	ldd	r24, Y+33	; 0x21
    28fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2900:	9e 8f       	std	Y+30, r25	; 0x1e
    2902:	8d 8f       	std	Y+29, r24	; 0x1d
    2904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <Enter_Password+0x128>
    290c:	9e 8f       	std	Y+30, r25	; 0x1e
    290e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LCD_intgerToString(enteredPassword[i]);
    2910:	80 91 74 01 	lds	r24, 0x0174
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	ce 01       	movw	r24, r28
    291a:	8b 96       	adiw	r24, 0x2b	; 43
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_intgerToString>
		i++;
    292c:	80 91 74 01 	lds	r24, 0x0174
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	80 93 74 01 	sts	0x0174, r24
	flagCorrectPass=0;

	LCD_clearScreen();
	LCD_moveCursor(0, 0);

	while(i<PASSWORD_LENGTH){
    2936:	80 91 74 01 	lds	r24, 0x0174
    293a:	84 30       	cpi	r24, 0x04	; 4
    293c:	08 f4       	brcc	.+2      	; 0x2940 <Enter_Password+0x160>
    293e:	69 cf       	rjmp	.-302    	; 0x2812 <Enter_Password+0x32>
		enteredPassword[i]=KEYPAD_getPressedKey();
		_delay_ms(250);
		LCD_intgerToString(enteredPassword[i]);
		i++;
	}
	i=0;
    2940:	10 92 74 01 	sts	0x0174, r1
    2944:	9c c0       	rjmp	.+312    	; 0x2a7e <Enter_Password+0x29e>
	while(i<PASSWORD_LENGTH){
		if(Password[i]==enteredPassword[i]){
    2946:	80 91 74 01 	lds	r24, 0x0174
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	fc 01       	movw	r30, r24
    2950:	e2 59       	subi	r30, 0x92	; 146
    2952:	fe 4f       	sbci	r31, 0xFE	; 254
    2954:	40 81       	ld	r20, Z
    2956:	80 91 74 01 	lds	r24, 0x0174
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	ce 01       	movw	r24, r28
    2960:	8b 96       	adiw	r24, 0x2b	; 43
    2962:	fc 01       	movw	r30, r24
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	80 81       	ld	r24, Z
    296a:	48 17       	cp	r20, r24
    296c:	31 f4       	brne	.+12     	; 0x297a <Enter_Password+0x19a>
			i++;
    296e:	80 91 74 01 	lds	r24, 0x0174
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	80 93 74 01 	sts	0x0174, r24
    2978:	82 c0       	rjmp	.+260    	; 0x2a7e <Enter_Password+0x29e>
		}else{
			LCD_clearScreen();
    297a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
			LCD_displayString("Incorrect Pass");
    2986:	81 e8       	ldi	r24, 0x81	; 129
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	aa ef       	ldi	r26, 0xFA	; 250
    2994:	b4 e4       	ldi	r27, 0x44	; 68
    2996:	89 8f       	std	Y+25, r24	; 0x19
    2998:	9a 8f       	std	Y+26, r25	; 0x1a
    299a:	ab 8f       	std	Y+27, r26	; 0x1b
    299c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299e:	69 8d       	ldd	r22, Y+25	; 0x19
    29a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a ef       	ldi	r20, 0xFA	; 250
    29ac:	54 e4       	ldi	r21, 0x44	; 68
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8d 8b       	std	Y+21, r24	; 0x15
    29b8:	9e 8b       	std	Y+22, r25	; 0x16
    29ba:	af 8b       	std	Y+23, r26	; 0x17
    29bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29be:	6d 89       	ldd	r22, Y+21	; 0x15
    29c0:	7e 89       	ldd	r23, Y+22	; 0x16
    29c2:	8f 89       	ldd	r24, Y+23	; 0x17
    29c4:	98 8d       	ldd	r25, Y+24	; 0x18
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	2c f4       	brge	.+10     	; 0x29e0 <Enter_Password+0x200>
		__ticks = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9c 8b       	std	Y+20, r25	; 0x14
    29dc:	8b 8b       	std	Y+19, r24	; 0x13
    29de:	3f c0       	rjmp	.+126    	; 0x2a5e <Enter_Password+0x27e>
	else if (__tmp > 65535)
    29e0:	6d 89       	ldd	r22, Y+21	; 0x15
    29e2:	7e 89       	ldd	r23, Y+22	; 0x16
    29e4:	8f 89       	ldd	r24, Y+23	; 0x17
    29e6:	98 8d       	ldd	r25, Y+24	; 0x18
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	4c f5       	brge	.+82     	; 0x2a4a <Enter_Password+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f8:	69 8d       	ldd	r22, Y+25	; 0x19
    29fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e2       	ldi	r20, 0x20	; 32
    2a06:	51 e4       	ldi	r21, 0x41	; 65
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	8b 8b       	std	Y+19, r24	; 0x13
    2a20:	0f c0       	rjmp	.+30     	; 0x2a40 <Enter_Password+0x260>
    2a22:	88 ec       	ldi	r24, 0xC8	; 200
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	9a 8b       	std	Y+18, r25	; 0x12
    2a28:	89 8b       	std	Y+17, r24	; 0x11
    2a2a:	89 89       	ldd	r24, Y+17	; 0x11
    2a2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <Enter_Password+0x24e>
    2a32:	9a 8b       	std	Y+18, r25	; 0x12
    2a34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a36:	8b 89       	ldd	r24, Y+19	; 0x13
    2a38:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	9c 8b       	std	Y+20, r25	; 0x14
    2a3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a40:	8b 89       	ldd	r24, Y+19	; 0x13
    2a42:	9c 89       	ldd	r25, Y+20	; 0x14
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	69 f7       	brne	.-38     	; 0x2a22 <Enter_Password+0x242>
    2a48:	14 c0       	rjmp	.+40     	; 0x2a72 <Enter_Password+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a50:	98 8d       	ldd	r25, Y+24	; 0x18
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
    2a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a60:	9c 89       	ldd	r25, Y+20	; 0x14
    2a62:	98 8b       	std	Y+16, r25	; 0x10
    2a64:	8f 87       	std	Y+15, r24	; 0x0f
    2a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a68:	98 89       	ldd	r25, Y+16	; 0x10
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <Enter_Password+0x28a>
    2a6e:	98 8b       	std	Y+16, r25	; 0x10
    2a70:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			flagCorrectPass=0;
    2a72:	10 92 75 01 	sts	0x0175, r1
			i=0;
    2a76:	10 92 74 01 	sts	0x0174, r1
			return 0;
    2a7a:	1f a6       	std	Y+47, r1	; 0x2f
    2a7c:	8a c0       	rjmp	.+276    	; 0x2b92 <Enter_Password+0x3b2>
		_delay_ms(250);
		LCD_intgerToString(enteredPassword[i]);
		i++;
	}
	i=0;
	while(i<PASSWORD_LENGTH){
    2a7e:	80 91 74 01 	lds	r24, 0x0174
    2a82:	84 30       	cpi	r24, 0x04	; 4
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <Enter_Password+0x2a8>
    2a86:	5f cf       	rjmp	.-322    	; 0x2946 <Enter_Password+0x166>
			flagCorrectPass=0;
			i=0;
			return 0;
		}
	}
	flagCorrectPass=1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	80 93 75 01 	sts	0x0175, r24
//	enteredPassword=1;
	i=0;
    2a8e:	10 92 74 01 	sts	0x0174, r1
	LCD_clearScreen();
    2a92:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("Correct Password");
    2a9e:	80 e9       	ldi	r24, 0x90	; 144
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	aa e7       	ldi	r26, 0x7A	; 122
    2aac:	b4 e4       	ldi	r27, 0x44	; 68
    2aae:	8b 87       	std	Y+11, r24	; 0x0b
    2ab0:	9c 87       	std	Y+12, r25	; 0x0c
    2ab2:	ad 87       	std	Y+13, r26	; 0x0d
    2ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a ef       	ldi	r20, 0xFA	; 250
    2ac4:	54 e4       	ldi	r21, 0x44	; 68
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8f 83       	std	Y+7, r24	; 0x07
    2ad0:	98 87       	std	Y+8, r25	; 0x08
    2ad2:	a9 87       	std	Y+9, r26	; 0x09
    2ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad8:	78 85       	ldd	r23, Y+8	; 0x08
    2ada:	89 85       	ldd	r24, Y+9	; 0x09
    2adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <Enter_Password+0x318>
		__ticks = 1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <Enter_Password+0x396>
	else if (__tmp > 65535)
    2af8:	6f 81       	ldd	r22, Y+7	; 0x07
    2afa:	78 85       	ldd	r23, Y+8	; 0x08
    2afc:	89 85       	ldd	r24, Y+9	; 0x09
    2afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	4c f5       	brge	.+82     	; 0x2b62 <Enter_Password+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <Enter_Password+0x378>
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	8b 83       	std	Y+3, r24	; 0x03
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <Enter_Password+0x366>
    2b4a:	9c 83       	std	Y+4, r25	; 0x04
    2b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	9e 81       	ldd	r25, Y+6	; 0x06
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f7       	brne	.-38     	; 0x2b3a <Enter_Password+0x35a>
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <Enter_Password+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <Enter_Password+0x3a2>
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	controlPasswordMenu();
    2b8a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <controlPasswordMenu>
	return 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	8f a7       	std	Y+47, r24	; 0x2f
    2b92:	8f a5       	ldd	r24, Y+47	; 0x2f
}
    2b94:	af 96       	adiw	r28, 0x2f	; 47
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	08 95       	ret

00002baa <controlPasswordMenu>:

void controlPasswordMenu(){
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	2e 97       	sbiw	r28, 0x0e	; 14
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61

	flagCorrectPass=0;
    2bbe:	10 92 75 01 	sts	0x0175, r1
	LCD_clearScreen();
    2bc2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("1)Control Menu");
    2bce:	81 ea       	ldi	r24, 0xA1	; 161
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("2)Password Menu");
    2bde:	80 eb       	ldi	r24, 0xB0	; 176
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	key=KEYPAD_getPressedKey();
    2be6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <KEYPAD_getPressedKey>
    2bea:	80 93 73 01 	sts	0x0173, r24
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	aa e7       	ldi	r26, 0x7A	; 122
    2bf4:	b3 e4       	ldi	r27, 0x43	; 67
    2bf6:	8b 87       	std	Y+11, r24	; 0x0b
    2bf8:	9c 87       	std	Y+12, r25	; 0x0c
    2bfa:	ad 87       	std	Y+13, r26	; 0x0d
    2bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a ef       	ldi	r20, 0xFA	; 250
    2c0c:	54 e4       	ldi	r21, 0x44	; 68
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	8f 83       	std	Y+7, r24	; 0x07
    2c18:	98 87       	std	Y+8, r25	; 0x08
    2c1a:	a9 87       	std	Y+9, r26	; 0x09
    2c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c20:	78 85       	ldd	r23, Y+8	; 0x08
    2c22:	89 85       	ldd	r24, Y+9	; 0x09
    2c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	2c f4       	brge	.+10     	; 0x2c40 <controlPasswordMenu+0x96>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	3f c0       	rjmp	.+126    	; 0x2cbe <controlPasswordMenu+0x114>
	else if (__tmp > 65535)
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	4c f5       	brge	.+82     	; 0x2caa <controlPasswordMenu+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <controlPasswordMenu+0xf6>
    2c82:	88 ec       	ldi	r24, 0xC8	; 200
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9c 83       	std	Y+4, r25	; 0x04
    2c88:	8b 83       	std	Y+3, r24	; 0x03
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <controlPasswordMenu+0xe4>
    2c92:	9c 83       	std	Y+4, r25	; 0x04
    2c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	69 f7       	brne	.-38     	; 0x2c82 <controlPasswordMenu+0xd8>
    2ca8:	14 c0       	rjmp	.+40     	; 0x2cd2 <controlPasswordMenu+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2caa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cac:	78 85       	ldd	r23, Y+8	; 0x08
    2cae:	89 85       	ldd	r24, Y+9	; 0x09
    2cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <controlPasswordMenu+0x120>
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	if(key==1){
    2cd2:	80 91 73 01 	lds	r24, 0x0173
    2cd6:	81 30       	cpi	r24, 0x01	; 1
    2cd8:	19 f4       	brne	.+6      	; 0x2ce0 <controlPasswordMenu+0x136>
		motorLEDList();
    2cda:	0e 94 84 16 	call	0x2d08	; 0x2d08 <motorLEDList>
    2cde:	0b c0       	rjmp	.+22     	; 0x2cf6 <controlPasswordMenu+0x14c>
//		control menu LED,MOTOR,DISPLAY DATA,BACK TO MAIN
	}else if(key==2){
    2ce0:	80 91 73 01 	lds	r24, 0x0173
    2ce4:	82 30       	cpi	r24, 0x02	; 2
    2ce6:	29 f4       	brne	.+10     	; 0x2cf2 <controlPasswordMenu+0x148>
		LCD_clearScreen();
    2ce8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
		Main_Menu();
    2cec:	0e 94 99 12 	call	0x2532	; 0x2532 <Main_Menu>
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <controlPasswordMenu+0x14c>
	}else{
		controlPasswordMenu();
    2cf2:	0e 94 d5 15 	call	0x2baa	; 0x2baa <controlPasswordMenu>
	}
}
    2cf6:	2e 96       	adiw	r28, 0x0e	; 14
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <motorLEDList>:

void motorLEDList(){
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	2e 97       	sbiw	r28, 0x0e	; 14
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2d1c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("1)Control Motor");
    2d28:	80 ec       	ldi	r24, 0xC0	; 192
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("2)Control LED");
    2d38:	80 ed       	ldi	r24, 0xD0	; 208
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(2, 0);
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("3)Control Menu");
    2d48:	8e ed       	ldi	r24, 0xDE	; 222
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(3, 0);
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("4)Display Status");
    2d58:	8d ee       	ldi	r24, 0xED	; 237
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	key=KEYPAD_getPressedKey();
    2d60:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <KEYPAD_getPressedKey>
    2d64:	80 93 73 01 	sts	0x0173, r24
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	aa e7       	ldi	r26, 0x7A	; 122
    2d6e:	b3 e4       	ldi	r27, 0x43	; 67
    2d70:	8b 87       	std	Y+11, r24	; 0x0b
    2d72:	9c 87       	std	Y+12, r25	; 0x0c
    2d74:	ad 87       	std	Y+13, r26	; 0x0d
    2d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a ef       	ldi	r20, 0xFA	; 250
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8f 83       	std	Y+7, r24	; 0x07
    2d92:	98 87       	std	Y+8, r25	; 0x08
    2d94:	a9 87       	std	Y+9, r26	; 0x09
    2d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <motorLEDList+0xb2>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <motorLEDList+0x130>
	else if (__tmp > 65535)
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <motorLEDList+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <motorLEDList+0x112>
    2dfc:	88 ec       	ldi	r24, 0xC8	; 200
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <motorLEDList+0x100>
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <motorLEDList+0xf4>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <motorLEDList+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <motorLEDList+0x13c>
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	if(key==1){
    2e4c:	80 91 73 01 	lds	r24, 0x0173
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	19 f4       	brne	.+6      	; 0x2e5a <motorLEDList+0x152>
		motorMainMenu();
    2e54:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <motorMainMenu>
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <motorLEDList+0x17a>
	}else if(key==2){
    2e5a:	80 91 73 01 	lds	r24, 0x0173
    2e5e:	82 30       	cpi	r24, 0x02	; 2
    2e60:	19 f4       	brne	.+6      	; 0x2e68 <motorLEDList+0x160>
		//led control Function
		controlLEDList();
    2e62:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <controlLEDList>
    2e66:	0d c0       	rjmp	.+26     	; 0x2e82 <motorLEDList+0x17a>
	}else if(key==3){
    2e68:	80 91 73 01 	lds	r24, 0x0173
    2e6c:	83 30       	cpi	r24, 0x03	; 3
    2e6e:	19 f4       	brne	.+6      	; 0x2e76 <motorLEDList+0x16e>
		controlPasswordMenu();
    2e70:	0e 94 d5 15 	call	0x2baa	; 0x2baa <controlPasswordMenu>
    2e74:	06 c0       	rjmp	.+12     	; 0x2e82 <motorLEDList+0x17a>
	}else if(key==4){
    2e76:	80 91 73 01 	lds	r24, 0x0173
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	11 f0       	breq	.+4      	; 0x2e82 <motorLEDList+0x17a>
		//display status function
	}else{
		motorLEDList();
    2e7e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <motorLEDList>
	}
}
    2e82:	2e 96       	adiw	r28, 0x0e	; 14
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <motorMainMenu>:

void motorMainMenu(){
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	aa 97       	sbiw	r28, 0x2a	; 42
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2ea8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("1)Turn on Motor");
    2eb4:	8e ef       	ldi	r24, 0xFE	; 254
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("2)Turn off Motor");
    2ec4:	8e e0       	ldi	r24, 0x0E	; 14
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(2, 0);
    2ecc:	82 e0       	ldi	r24, 0x02	; 2
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("3)Control Menu");
    2ed4:	8e ed       	ldi	r24, 0xDE	; 222
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	key=KEYPAD_getPressedKey();
    2edc:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <KEYPAD_getPressedKey>
    2ee0:	80 93 73 01 	sts	0x0173, r24
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	aa e7       	ldi	r26, 0x7A	; 122
    2eea:	b3 e4       	ldi	r27, 0x43	; 67
    2eec:	8f a3       	std	Y+39, r24	; 0x27
    2eee:	98 a7       	std	Y+40, r25	; 0x28
    2ef0:	a9 a7       	std	Y+41, r26	; 0x29
    2ef2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    2efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8b a3       	std	Y+35, r24	; 0x23
    2f0e:	9c a3       	std	Y+36, r25	; 0x24
    2f10:	ad a3       	std	Y+37, r26	; 0x25
    2f12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f14:	6b a1       	ldd	r22, Y+35	; 0x23
    2f16:	7c a1       	ldd	r23, Y+36	; 0x24
    2f18:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <motorMainMenu+0xa2>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9a a3       	std	Y+34, r25	; 0x22
    2f32:	89 a3       	std	Y+33, r24	; 0x21
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <motorMainMenu+0x120>
	else if (__tmp > 65535)
    2f36:	6b a1       	ldd	r22, Y+35	; 0x23
    2f38:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <motorMainMenu+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f50:	78 a5       	ldd	r23, Y+40	; 0x28
    2f52:	89 a5       	ldd	r24, Y+41	; 0x29
    2f54:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9a a3       	std	Y+34, r25	; 0x22
    2f74:	89 a3       	std	Y+33, r24	; 0x21
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <motorMainMenu+0x102>
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	98 a3       	std	Y+32, r25	; 0x20
    2f7e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f82:	98 a1       	ldd	r25, Y+32	; 0x20
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <motorMainMenu+0xf0>
    2f88:	98 a3       	std	Y+32, r25	; 0x20
    2f8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9a a3       	std	Y+34, r25	; 0x22
    2f94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	89 a1       	ldd	r24, Y+33	; 0x21
    2f98:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <motorMainMenu+0xe4>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <motorMainMenu+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9a a3       	std	Y+34, r25	; 0x22
    2fb2:	89 a3       	std	Y+33, r24	; 0x21
    2fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fba:	8d 8f       	std	Y+29, r24	; 0x1d
    2fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <motorMainMenu+0x12c>
    2fc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	if(key==1){
    2fc8:	80 91 73 01 	lds	r24, 0x0173
    2fcc:	81 30       	cpi	r24, 0x01	; 1
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <motorMainMenu+0x13e>
    2fd0:	7f c0       	rjmp	.+254    	; 0x30d0 <motorMainMenu+0x23c>
		LCD_clearScreen();
    2fd2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	60 e0       	ldi	r22, 0x00	; 0
    2fda:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
		LCD_displayString("Motor is ON");
    2fde:	8f e1       	ldi	r24, 0x1F	; 31
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	aa ef       	ldi	r26, 0xFA	; 250
    2fec:	b3 e4       	ldi	r27, 0x43	; 67
    2fee:	89 8f       	std	Y+25, r24	; 0x19
    2ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a ef       	ldi	r20, 0xFA	; 250
    3004:	54 e4       	ldi	r21, 0x44	; 68
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	8d 8b       	std	Y+21, r24	; 0x15
    3010:	9e 8b       	std	Y+22, r25	; 0x16
    3012:	af 8b       	std	Y+23, r26	; 0x17
    3014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <motorMainMenu+0x1a4>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 8b       	std	Y+20, r25	; 0x14
    3034:	8b 8b       	std	Y+19, r24	; 0x13
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <motorMainMenu+0x222>
	else if (__tmp > 65535)
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <motorMainMenu+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <motorMainMenu+0x204>
    307a:	88 ec       	ldi	r24, 0xC8	; 200
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	9a 8b       	std	Y+18, r25	; 0x12
    3080:	89 8b       	std	Y+17, r24	; 0x11
    3082:	89 89       	ldd	r24, Y+17	; 0x11
    3084:	9a 89       	ldd	r25, Y+18	; 0x12
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <motorMainMenu+0x1f2>
    308a:	9a 8b       	std	Y+18, r25	; 0x12
    308c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9c 8b       	std	Y+20, r25	; 0x14
    3096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	8b 89       	ldd	r24, Y+19	; 0x13
    309a:	9c 89       	ldd	r25, Y+20	; 0x14
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <motorMainMenu+0x1e6>
    30a0:	14 c0       	rjmp	.+40     	; 0x30ca <motorMainMenu+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	6d 89       	ldd	r22, Y+21	; 0x15
    30a4:	7e 89       	ldd	r23, Y+22	; 0x16
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9c 8b       	std	Y+20, r25	; 0x14
    30b4:	8b 8b       	std	Y+19, r24	; 0x13
    30b6:	8b 89       	ldd	r24, Y+19	; 0x13
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	98 8b       	std	Y+16, r25	; 0x10
    30bc:	8f 87       	std	Y+15, r24	; 0x0f
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	98 89       	ldd	r25, Y+16	; 0x10
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <motorMainMenu+0x22e>
    30c6:	98 8b       	std	Y+16, r25	; 0x10
    30c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		TurnOnMotor();
    30ca:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <TurnOnMotor>
    30ce:	8a c0       	rjmp	.+276    	; 0x31e4 <motorMainMenu+0x350>
	}else if(key==2){
    30d0:	80 91 73 01 	lds	r24, 0x0173
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	09 f0       	breq	.+2      	; 0x30da <motorMainMenu+0x246>
    30d8:	7f c0       	rjmp	.+254    	; 0x31d8 <motorMainMenu+0x344>
		LCD_clearScreen();
    30da:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
		LCD_displayString("Motor is OFF");
    30e6:	8b e2       	ldi	r24, 0x2B	; 43
    30e8:	91 e0       	ldi	r25, 0x01	; 1
    30ea:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	aa ef       	ldi	r26, 0xFA	; 250
    30f4:	b3 e4       	ldi	r27, 0x43	; 67
    30f6:	8b 87       	std	Y+11, r24	; 0x0b
    30f8:	9c 87       	std	Y+12, r25	; 0x0c
    30fa:	ad 87       	std	Y+13, r26	; 0x0d
    30fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3100:	7c 85       	ldd	r23, Y+12	; 0x0c
    3102:	8d 85       	ldd	r24, Y+13	; 0x0d
    3104:	9e 85       	ldd	r25, Y+14	; 0x0e
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	4a ef       	ldi	r20, 0xFA	; 250
    310c:	54 e4       	ldi	r21, 0x44	; 68
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	8f 83       	std	Y+7, r24	; 0x07
    3118:	98 87       	std	Y+8, r25	; 0x08
    311a:	a9 87       	std	Y+9, r26	; 0x09
    311c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    311e:	6f 81       	ldd	r22, Y+7	; 0x07
    3120:	78 85       	ldd	r23, Y+8	; 0x08
    3122:	89 85       	ldd	r24, Y+9	; 0x09
    3124:	9a 85       	ldd	r25, Y+10	; 0x0a
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e8       	ldi	r20, 0x80	; 128
    312c:	5f e3       	ldi	r21, 0x3F	; 63
    312e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3132:	88 23       	and	r24, r24
    3134:	2c f4       	brge	.+10     	; 0x3140 <motorMainMenu+0x2ac>
		__ticks = 1;
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	9e 83       	std	Y+6, r25	; 0x06
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	3f c0       	rjmp	.+126    	; 0x31be <motorMainMenu+0x32a>
	else if (__tmp > 65535)
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	3f ef       	ldi	r19, 0xFF	; 255
    314c:	4f e7       	ldi	r20, 0x7F	; 127
    314e:	57 e4       	ldi	r21, 0x47	; 71
    3150:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3154:	18 16       	cp	r1, r24
    3156:	4c f5       	brge	.+82     	; 0x31aa <motorMainMenu+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3158:	6b 85       	ldd	r22, Y+11	; 0x0b
    315a:	7c 85       	ldd	r23, Y+12	; 0x0c
    315c:	8d 85       	ldd	r24, Y+13	; 0x0d
    315e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e2       	ldi	r20, 0x20	; 32
    3166:	51 e4       	ldi	r21, 0x41	; 65
    3168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	9e 83       	std	Y+6, r25	; 0x06
    317e:	8d 83       	std	Y+5, r24	; 0x05
    3180:	0f c0       	rjmp	.+30     	; 0x31a0 <motorMainMenu+0x30c>
    3182:	88 ec       	ldi	r24, 0xC8	; 200
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9c 83       	std	Y+4, r25	; 0x04
    3188:	8b 83       	std	Y+3, r24	; 0x03
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	9c 81       	ldd	r25, Y+4	; 0x04
    318e:	01 97       	sbiw	r24, 0x01	; 1
    3190:	f1 f7       	brne	.-4      	; 0x318e <motorMainMenu+0x2fa>
    3192:	9c 83       	std	Y+4, r25	; 0x04
    3194:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	9e 81       	ldd	r25, Y+6	; 0x06
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	00 97       	sbiw	r24, 0x00	; 0
    31a6:	69 f7       	brne	.-38     	; 0x3182 <motorMainMenu+0x2ee>
    31a8:	14 c0       	rjmp	.+40     	; 0x31d2 <motorMainMenu+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31aa:	6f 81       	ldd	r22, Y+7	; 0x07
    31ac:	78 85       	ldd	r23, Y+8	; 0x08
    31ae:	89 85       	ldd	r24, Y+9	; 0x09
    31b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	9e 81       	ldd	r25, Y+6	; 0x06
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <motorMainMenu+0x336>
    31ce:	9a 83       	std	Y+2, r25	; 0x02
    31d0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		TurnOffMotor();
    31d2:	0e 94 df 19 	call	0x33be	; 0x33be <TurnOffMotor>
    31d6:	06 c0       	rjmp	.+12     	; 0x31e4 <motorMainMenu+0x350>
	}else if(key==3){
    31d8:	80 91 73 01 	lds	r24, 0x0173
    31dc:	83 30       	cpi	r24, 0x03	; 3
    31de:	11 f4       	brne	.+4      	; 0x31e4 <motorMainMenu+0x350>
		controlPasswordMenu();
    31e0:	0e 94 d5 15 	call	0x2baa	; 0x2baa <controlPasswordMenu>
	}
}
    31e4:	aa 96       	adiw	r28, 0x2a	; 42
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <controlLEDList>:

void controlLEDList(){
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	2e 97       	sbiw	r28, 0x0e	; 14
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    320a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("Press the Push");
    3216:	88 e3       	ldi	r24, 0x38	; 56
    3218:	91 e0       	ldi	r25, 0x01	; 1
    321a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_moveCursor>
	LCD_displayString("button to goback");
    3226:	87 e4       	ldi	r24, 0x47	; 71
    3228:	91 e0       	ldi	r25, 0x01	; 1
    322a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LCD_displayString>
	while(1){
	if(!(PINA&(1<<0))){
    322e:	e9 e3       	ldi	r30, 0x39	; 57
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	88 2f       	mov	r24, r24
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	81 70       	andi	r24, 0x01	; 1
    323a:	90 70       	andi	r25, 0x00	; 0
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	41 f4       	brne	.+16     	; 0x3250 <controlLEDList+0x5a>
		TOGGLE_BIT(PORTA,4);
    3240:	ab e3       	ldi	r26, 0x3B	; 59
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	eb e3       	ldi	r30, 0x3B	; 59
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	90 81       	ld	r25, Z
    324a:	80 e1       	ldi	r24, 0x10	; 16
    324c:	89 27       	eor	r24, r25
    324e:	8c 93       	st	X, r24
		//_delay_ms(100);
	}if(!(PINA&(1<<1))){
    3250:	e9 e3       	ldi	r30, 0x39	; 57
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	88 2f       	mov	r24, r24
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	82 70       	andi	r24, 0x02	; 2
    325c:	90 70       	andi	r25, 0x00	; 0
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	41 f4       	brne	.+16     	; 0x3272 <controlLEDList+0x7c>
		TOGGLE_BIT(PORTA,5);
    3262:	ab e3       	ldi	r26, 0x3B	; 59
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	eb e3       	ldi	r30, 0x3B	; 59
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	90 81       	ld	r25, Z
    326c:	80 e2       	ldi	r24, 0x20	; 32
    326e:	89 27       	eor	r24, r25
    3270:	8c 93       	st	X, r24
		//_delay_ms(100);
	}if(!(PINA&(1<<2))){
    3272:	e9 e3       	ldi	r30, 0x39	; 57
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	80 81       	ld	r24, Z
    3278:	88 2f       	mov	r24, r24
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	84 70       	andi	r24, 0x04	; 4
    327e:	90 70       	andi	r25, 0x00	; 0
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	41 f4       	brne	.+16     	; 0x3294 <controlLEDList+0x9e>
		TOGGLE_BIT(PORTA,6);
    3284:	ab e3       	ldi	r26, 0x3B	; 59
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	eb e3       	ldi	r30, 0x3B	; 59
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	90 81       	ld	r25, Z
    328e:	80 e4       	ldi	r24, 0x40	; 64
    3290:	89 27       	eor	r24, r25
    3292:	8c 93       	st	X, r24
		//_delay_ms(100);
	}if(!(PINA&(1<<3))){
    3294:	e9 e3       	ldi	r30, 0x39	; 57
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	88 70       	andi	r24, 0x08	; 8
    32a0:	90 70       	andi	r25, 0x00	; 0
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	41 f4       	brne	.+16     	; 0x32b6 <controlLEDList+0xc0>
		TOGGLE_BIT(PORTA,7);
    32a6:	ab e3       	ldi	r26, 0x3B	; 59
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	eb e3       	ldi	r30, 0x3B	; 59
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	90 81       	ld	r25, Z
    32b0:	80 e8       	ldi	r24, 0x80	; 128
    32b2:	89 27       	eor	r24, r25
    32b4:	8c 93       	st	X, r24
		//_delay_ms(100);
	}if(key==5){
    32b6:	80 91 73 01 	lds	r24, 0x0173
    32ba:	85 30       	cpi	r24, 0x05	; 5
    32bc:	11 f4       	brne	.+4      	; 0x32c2 <controlLEDList+0xcc>
		motorLEDList();
    32be:	0e 94 84 16 	call	0x2d08	; 0x2d08 <motorLEDList>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a8 ec       	ldi	r26, 0xC8	; 200
    32c8:	b2 e4       	ldi	r27, 0x42	; 66
    32ca:	8b 87       	std	Y+11, r24	; 0x0b
    32cc:	9c 87       	std	Y+12, r25	; 0x0c
    32ce:	ad 87       	std	Y+13, r26	; 0x0d
    32d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	4a ef       	ldi	r20, 0xFA	; 250
    32e0:	54 e4       	ldi	r21, 0x44	; 68
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	8f 83       	std	Y+7, r24	; 0x07
    32ec:	98 87       	std	Y+8, r25	; 0x08
    32ee:	a9 87       	std	Y+9, r26	; 0x09
    32f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f2:	6f 81       	ldd	r22, Y+7	; 0x07
    32f4:	78 85       	ldd	r23, Y+8	; 0x08
    32f6:	89 85       	ldd	r24, Y+9	; 0x09
    32f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e8       	ldi	r20, 0x80	; 128
    3300:	5f e3       	ldi	r21, 0x3F	; 63
    3302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3306:	88 23       	and	r24, r24
    3308:	2c f4       	brge	.+10     	; 0x3314 <controlLEDList+0x11e>
		__ticks = 1;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	3f c0       	rjmp	.+126    	; 0x3392 <controlLEDList+0x19c>
	else if (__tmp > 65535)
    3314:	6f 81       	ldd	r22, Y+7	; 0x07
    3316:	78 85       	ldd	r23, Y+8	; 0x08
    3318:	89 85       	ldd	r24, Y+9	; 0x09
    331a:	9a 85       	ldd	r25, Y+10	; 0x0a
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	3f ef       	ldi	r19, 0xFF	; 255
    3320:	4f e7       	ldi	r20, 0x7F	; 127
    3322:	57 e4       	ldi	r21, 0x47	; 71
    3324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3328:	18 16       	cp	r1, r24
    332a:	4c f5       	brge	.+82     	; 0x337e <controlLEDList+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332c:	6b 85       	ldd	r22, Y+11	; 0x0b
    332e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3330:	8d 85       	ldd	r24, Y+13	; 0x0d
    3332:	9e 85       	ldd	r25, Y+14	; 0x0e
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e2       	ldi	r20, 0x20	; 32
    333a:	51 e4       	ldi	r21, 0x41	; 65
    333c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9e 83       	std	Y+6, r25	; 0x06
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	0f c0       	rjmp	.+30     	; 0x3374 <controlLEDList+0x17e>
    3356:	88 ec       	ldi	r24, 0xC8	; 200
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9c 83       	std	Y+4, r25	; 0x04
    335c:	8b 83       	std	Y+3, r24	; 0x03
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	9c 81       	ldd	r25, Y+4	; 0x04
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	f1 f7       	brne	.-4      	; 0x3362 <controlLEDList+0x16c>
    3366:	9c 83       	std	Y+4, r25	; 0x04
    3368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	9e 83       	std	Y+6, r25	; 0x06
    3372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	69 f7       	brne	.-38     	; 0x3356 <controlLEDList+0x160>
    337c:	58 cf       	rjmp	.-336    	; 0x322e <controlLEDList+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	6f 81       	ldd	r22, Y+7	; 0x07
    3380:	78 85       	ldd	r23, Y+8	; 0x08
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	8d 83       	std	Y+5, r24	; 0x05
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	9a 83       	std	Y+2, r25	; 0x02
    3398:	89 83       	std	Y+1, r24	; 0x01
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	9a 81       	ldd	r25, Y+2	; 0x02
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <controlLEDList+0x1a8>
    33a2:	9a 83       	std	Y+2, r25	; 0x02
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	43 cf       	rjmp	.-378    	; 0x322e <controlLEDList+0x38>

000033a8 <TurnOnMotor>:
	}
	_delay_ms(100);
	}
}

void TurnOnMotor(){
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(CW,50);
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	62 e3       	ldi	r22, 0x32	; 50
    33b4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DcMotor_Rotate>
}
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <TurnOffMotor>:

void TurnOffMotor(){
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(STOP, 0);
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DcMotor_Rotate>
}
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <flashLED>:

void flashLED(){
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	flash+=flash+1;
    33dc:	90 91 72 01 	lds	r25, 0x0172
    33e0:	80 91 72 01 	lds	r24, 0x0172
    33e4:	89 0f       	add	r24, r25
    33e6:	8f 5f       	subi	r24, 0xFF	; 255
    33e8:	80 93 72 01 	sts	0x0172, r24
}
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <INT0_Init>:

void INT0_Init(void)
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(3, 2, PIN_INPUT);
    33fa:	83 e0       	ldi	r24, 0x03	; 3
    33fc:	62 e0       	ldi	r22, 0x02	; 2
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(3, 2, LOGIC_HIGH);
    3404:	83 e0       	ldi	r24, 0x03	; 3
    3406:	62 e0       	ldi	r22, 0x02	; 2
    3408:	41 e0       	ldi	r20, 0x01	; 1
    340a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

	/* Trigger INT0 with the falling edge (ISC01 = 1 , ISC00 = 0) */
	SET_BIT(MCUCR,ISC01);
    340e:	a5 e5       	ldi	r26, 0x55	; 85
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e5 e5       	ldi	r30, 0x55	; 85
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	82 60       	ori	r24, 0x02	; 2
    341a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC00);
    341c:	a5 e5       	ldi	r26, 0x55	; 85
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e5 e5       	ldi	r30, 0x55	; 85
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	81 60       	ori	r24, 0x01	; 1
    3428:	8c 93       	st	X, r24

	SET_BIT(GICR,INT0);      /* Enable external interrupt pin INT0 */
    342a:	ab e5       	ldi	r26, 0x5B	; 91
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	eb e5       	ldi	r30, 0x5B	; 91
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	80 64       	ori	r24, 0x40	; 64
    3436:	8c 93       	st	X, r24
}
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	08 95       	ret

0000343e <__vector_1>:
 *                          INTERRUPT SERVICE ROUTINES                         *
 *******************************************************************************/

/* INT0 (ISR) that is responsible */
ISR(INT0_vect)
{
    343e:	1f 92       	push	r1
    3440:	0f 92       	push	r0
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	0f 92       	push	r0
    3446:	11 24       	eor	r1, r1
    3448:	2f 93       	push	r18
    344a:	3f 93       	push	r19
    344c:	4f 93       	push	r20
    344e:	5f 93       	push	r21
    3450:	6f 93       	push	r22
    3452:	7f 93       	push	r23
    3454:	8f 93       	push	r24
    3456:	9f 93       	push	r25
    3458:	af 93       	push	r26
    345a:	bf 93       	push	r27
    345c:	ef 93       	push	r30
    345e:	ff 93       	push	r31
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	2e 97       	sbiw	r28, 0x0e	; 14
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	cd bf       	out	0x3d, r28	; 61
	motorLEDList();
    346e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <motorLEDList>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	a0 ef       	ldi	r26, 0xF0	; 240
    3478:	b1 e4       	ldi	r27, 0x41	; 65
    347a:	8b 87       	std	Y+11, r24	; 0x0b
    347c:	9c 87       	std	Y+12, r25	; 0x0c
    347e:	ad 87       	std	Y+13, r26	; 0x0d
    3480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3482:	6b 85       	ldd	r22, Y+11	; 0x0b
    3484:	7c 85       	ldd	r23, Y+12	; 0x0c
    3486:	8d 85       	ldd	r24, Y+13	; 0x0d
    3488:	9e 85       	ldd	r25, Y+14	; 0x0e
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	4a ef       	ldi	r20, 0xFA	; 250
    3490:	54 e4       	ldi	r21, 0x44	; 68
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	8f 83       	std	Y+7, r24	; 0x07
    349c:	98 87       	std	Y+8, r25	; 0x08
    349e:	a9 87       	std	Y+9, r26	; 0x09
    34a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a2:	6f 81       	ldd	r22, Y+7	; 0x07
    34a4:	78 85       	ldd	r23, Y+8	; 0x08
    34a6:	89 85       	ldd	r24, Y+9	; 0x09
    34a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e8       	ldi	r20, 0x80	; 128
    34b0:	5f e3       	ldi	r21, 0x3F	; 63
    34b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b6:	88 23       	and	r24, r24
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <__vector_1+0x86>
		__ticks = 1;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	3f c0       	rjmp	.+126    	; 0x3542 <__vector_1+0x104>
	else if (__tmp > 65535)
    34c4:	6f 81       	ldd	r22, Y+7	; 0x07
    34c6:	78 85       	ldd	r23, Y+8	; 0x08
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	3f ef       	ldi	r19, 0xFF	; 255
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	57 e4       	ldi	r21, 0x47	; 71
    34d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d8:	18 16       	cp	r1, r24
    34da:	4c f5       	brge	.+82     	; 0x352e <__vector_1+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34de:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e2       	ldi	r20, 0x20	; 32
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
    3504:	0f c0       	rjmp	.+30     	; 0x3524 <__vector_1+0xe6>
    3506:	88 ec       	ldi	r24, 0xC8	; 200
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9c 83       	std	Y+4, r25	; 0x04
    350c:	8b 83       	std	Y+3, r24	; 0x03
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	9c 81       	ldd	r25, Y+4	; 0x04
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <__vector_1+0xd4>
    3516:	9c 83       	std	Y+4, r25	; 0x04
    3518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351a:	8d 81       	ldd	r24, Y+5	; 0x05
    351c:	9e 81       	ldd	r25, Y+6	; 0x06
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	9e 83       	std	Y+6, r25	; 0x06
    3522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	69 f7       	brne	.-38     	; 0x3506 <__vector_1+0xc8>
    352c:	14 c0       	rjmp	.+40     	; 0x3556 <__vector_1+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352e:	6f 81       	ldd	r22, Y+7	; 0x07
    3530:	78 85       	ldd	r23, Y+8	; 0x08
    3532:	89 85       	ldd	r24, Y+9	; 0x09
    3534:	9a 85       	ldd	r25, Y+10	; 0x0a
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	9e 83       	std	Y+6, r25	; 0x06
    3540:	8d 83       	std	Y+5, r24	; 0x05
    3542:	8d 81       	ldd	r24, Y+5	; 0x05
    3544:	9e 81       	ldd	r25, Y+6	; 0x06
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	9a 81       	ldd	r25, Y+2	; 0x02
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <__vector_1+0x110>
    3552:	9a 83       	std	Y+2, r25	; 0x02
    3554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);       /* Just a 30ms delay due to Button-debouncing */
}
    3556:	2e 96       	adiw	r28, 0x0e	; 14
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	0f 90       	pop	r0
    357e:	1f 90       	pop	r1
    3580:	18 95       	reti

00003582 <__udivmodhi4>:
    3582:	aa 1b       	sub	r26, r26
    3584:	bb 1b       	sub	r27, r27
    3586:	51 e1       	ldi	r21, 0x11	; 17
    3588:	07 c0       	rjmp	.+14     	; 0x3598 <__udivmodhi4_ep>

0000358a <__udivmodhi4_loop>:
    358a:	aa 1f       	adc	r26, r26
    358c:	bb 1f       	adc	r27, r27
    358e:	a6 17       	cp	r26, r22
    3590:	b7 07       	cpc	r27, r23
    3592:	10 f0       	brcs	.+4      	; 0x3598 <__udivmodhi4_ep>
    3594:	a6 1b       	sub	r26, r22
    3596:	b7 0b       	sbc	r27, r23

00003598 <__udivmodhi4_ep>:
    3598:	88 1f       	adc	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	5a 95       	dec	r21
    359e:	a9 f7       	brne	.-22     	; 0x358a <__udivmodhi4_loop>
    35a0:	80 95       	com	r24
    35a2:	90 95       	com	r25
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	08 95       	ret

000035aa <__prologue_saves__>:
    35aa:	2f 92       	push	r2
    35ac:	3f 92       	push	r3
    35ae:	4f 92       	push	r4
    35b0:	5f 92       	push	r5
    35b2:	6f 92       	push	r6
    35b4:	7f 92       	push	r7
    35b6:	8f 92       	push	r8
    35b8:	9f 92       	push	r9
    35ba:	af 92       	push	r10
    35bc:	bf 92       	push	r11
    35be:	cf 92       	push	r12
    35c0:	df 92       	push	r13
    35c2:	ef 92       	push	r14
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	ca 1b       	sub	r28, r26
    35d4:	db 0b       	sbc	r29, r27
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	09 94       	ijmp

000035e2 <__epilogue_restores__>:
    35e2:	2a 88       	ldd	r2, Y+18	; 0x12
    35e4:	39 88       	ldd	r3, Y+17	; 0x11
    35e6:	48 88       	ldd	r4, Y+16	; 0x10
    35e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f4:	b9 84       	ldd	r11, Y+9	; 0x09
    35f6:	c8 84       	ldd	r12, Y+8	; 0x08
    35f8:	df 80       	ldd	r13, Y+7	; 0x07
    35fa:	ee 80       	ldd	r14, Y+6	; 0x06
    35fc:	fd 80       	ldd	r15, Y+5	; 0x05
    35fe:	0c 81       	ldd	r16, Y+4	; 0x04
    3600:	1b 81       	ldd	r17, Y+3	; 0x03
    3602:	aa 81       	ldd	r26, Y+2	; 0x02
    3604:	b9 81       	ldd	r27, Y+1	; 0x01
    3606:	ce 0f       	add	r28, r30
    3608:	d1 1d       	adc	r29, r1
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	ed 01       	movw	r28, r26
    3616:	08 95       	ret

00003618 <itoa>:
    3618:	fb 01       	movw	r30, r22
    361a:	9f 01       	movw	r18, r30
    361c:	e8 94       	clt
    361e:	42 30       	cpi	r20, 0x02	; 2
    3620:	c4 f0       	brlt	.+48     	; 0x3652 <itoa+0x3a>
    3622:	45 32       	cpi	r20, 0x25	; 37
    3624:	b4 f4       	brge	.+44     	; 0x3652 <itoa+0x3a>
    3626:	4a 30       	cpi	r20, 0x0A	; 10
    3628:	29 f4       	brne	.+10     	; 0x3634 <itoa+0x1c>
    362a:	97 fb       	bst	r25, 7
    362c:	1e f4       	brtc	.+6      	; 0x3634 <itoa+0x1c>
    362e:	90 95       	com	r25
    3630:	81 95       	neg	r24
    3632:	9f 4f       	sbci	r25, 0xFF	; 255
    3634:	64 2f       	mov	r22, r20
    3636:	77 27       	eor	r23, r23
    3638:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__udivmodhi4>
    363c:	80 5d       	subi	r24, 0xD0	; 208
    363e:	8a 33       	cpi	r24, 0x3A	; 58
    3640:	0c f0       	brlt	.+2      	; 0x3644 <itoa+0x2c>
    3642:	89 5d       	subi	r24, 0xD9	; 217
    3644:	81 93       	st	Z+, r24
    3646:	cb 01       	movw	r24, r22
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	a1 f7       	brne	.-24     	; 0x3634 <itoa+0x1c>
    364c:	16 f4       	brtc	.+4      	; 0x3652 <itoa+0x3a>
    364e:	5d e2       	ldi	r21, 0x2D	; 45
    3650:	51 93       	st	Z+, r21
    3652:	10 82       	st	Z, r1
    3654:	c9 01       	movw	r24, r18
    3656:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <strrev>

0000365a <strrev>:
    365a:	dc 01       	movw	r26, r24
    365c:	fc 01       	movw	r30, r24
    365e:	67 2f       	mov	r22, r23
    3660:	71 91       	ld	r23, Z+
    3662:	77 23       	and	r23, r23
    3664:	e1 f7       	brne	.-8      	; 0x365e <strrev+0x4>
    3666:	32 97       	sbiw	r30, 0x02	; 2
    3668:	04 c0       	rjmp	.+8      	; 0x3672 <strrev+0x18>
    366a:	7c 91       	ld	r23, X
    366c:	6d 93       	st	X+, r22
    366e:	70 83       	st	Z, r23
    3670:	62 91       	ld	r22, -Z
    3672:	ae 17       	cp	r26, r30
    3674:	bf 07       	cpc	r27, r31
    3676:	c8 f3       	brcs	.-14     	; 0x366a <strrev+0x10>
    3678:	08 95       	ret

0000367a <_exit>:
    367a:	f8 94       	cli

0000367c <__stop_program>:
    367c:	ff cf       	rjmp	.-2      	; 0x367c <__stop_program>
